<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rawraw</title>
  <subtitle>Change not delete ！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rawraw.info/"/>
  <updated>2018-02-27T06:20:52.797Z</updated>
  <id>http://rawraw.info/</id>
  
  <author>
    <name>rawraw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://rawraw.info/2018-01-27-gitstudy.html"/>
    <id>http://rawraw.info/2018-01-27-gitstudy.html</id>
    <published>2018-01-27T06:06:34.000Z</published>
    <updated>2018-02-27T06:20:52.797Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="git升级"><a href="#git升级" class="headerlink" title="git升级"></a>git升级</h2><p><code>$ git clone git://git.kernel.org/pub/scm/git/git.git</code></p>
<h2 id="初始化一个版本仓库"><a href="#初始化一个版本仓库" class="headerlink" title="初始化一个版本仓库"></a>初始化一个版本仓库</h2><p><code>$ git init</code></p>
<h2 id="Clone远程版本库"><a href="#Clone远程版本库" class="headerlink" title="Clone远程版本库"></a>Clone远程版本库</h2><p><code>$ git clone addr.</code></p>
<h2 id="添加远程版本库origin"><a href="#添加远程版本库origin" class="headerlink" title="添加远程版本库origin"></a>添加远程版本库origin</h2><p><code>$ git remote add origin addr.</code></p>
<h2 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h2><p><code>$ git remote -v</code></p>
<h2 id="提交你的修改"><a href="#提交你的修改" class="headerlink" title="提交你的修改"></a>提交你的修改</h2><h2 id="添加当前修改的文件到暂存区"><a href="#添加当前修改的文件到暂存区" class="headerlink" title="添加当前修改的文件到暂存区"></a>添加当前修改的文件到暂存区</h2><p><code>$ git add .</code></p>
<h2 id="如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件"><a href="#如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件" class="headerlink" title="如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件"></a>如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件</h2><p><code>$ git add -u</code></p>
<h2 id="提交你的修改-1"><a href="#提交你的修改-1" class="headerlink" title="提交你的修改"></a>提交你的修改</h2><p><code>$ git commit –m &amp;quot;你的注释&amp;quot;</code></p>
<h2 id="推送你的更新到远程服务器-语法为-git-push-远程名-本地分支-远程分支"><a href="#推送你的更新到远程服务器-语法为-git-push-远程名-本地分支-远程分支" class="headerlink" title="推送你的更新到远程服务器,语法为 git push [远程名] [本地分支]:[远程分支]"></a>推送你的更新到远程服务器,语法为 git push [远程名] [本地分支]:[远程分支]</h2><p><code>$ git push origin master</code></p>
<h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><p><code>$ git status</code></p>
<h2 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h2><p><code>$ git add readme.txt</code></p>
<h2 id="从当前跟踪列表移除文件，并完全删除"><a href="#从当前跟踪列表移除文件，并完全删除" class="headerlink" title="从当前跟踪列表移除文件，并完全删除"></a>从当前跟踪列表移除文件，并完全删除</h2><p><code>$ git rm readme.txt</code></p>
<h2 id="仅在暂存区删除，保留文件在当前目录，不再跟踪"><a href="#仅在暂存区删除，保留文件在当前目录，不再跟踪" class="headerlink" title="仅在暂存区删除，保留文件在当前目录，不再跟踪"></a>仅在暂存区删除，保留文件在当前目录，不再跟踪</h2><p><code>$ git rm –cached readme.txt</code></p>
<h2 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h2><p><code>$ git mv reademe.txt readme</code></p>
<h2 id="查看提交的历史记录"><a href="#查看提交的历史记录" class="headerlink" title="查看提交的历史记录"></a>查看提交的历史记录</h2><p><code>$ git log</code></p>
<h2 id="修改最后一次提交注释的，利用–amend参数"><a href="#修改最后一次提交注释的，利用–amend参数" class="headerlink" title="修改最后一次提交注释的，利用–amend参数"></a>修改最后一次提交注释的，利用–amend参数</h2><p><code>$ git checkout –- readme.txt</code></p>
<h2 id="基本的分支管理"><a href="#基本的分支管理" class="headerlink" title="基本的分支管理"></a>基本的分支管理</h2><h2 id="创建一个分支"><a href="#创建一个分支" class="headerlink" title="创建一个分支"></a>创建一个分支</h2><p><code>$ git branch workspace</code></p>
<h2 id="切换工作目录到workspace"><a href="#切换工作目录到workspace" class="headerlink" title="切换工作目录到workspace"></a>切换工作目录到workspace</h2><p><code>$ git chekcout workspace</code></p>
<h2 id="将上面的命令合在一起，创建workspace分支并切换到workspace"><a href="#将上面的命令合在一起，创建workspace分支并切换到workspace" class="headerlink" title="将上面的命令合在一起，创建workspace分支并切换到workspace"></a>将上面的命令合在一起，创建workspace分支并切换到workspace</h2><p><code>$ git chekcout –b workspace</code></p>
<h2 id="合并workspace分支，当前工作目录为master"><a href="#合并workspace分支，当前工作目录为master" class="headerlink" title="合并workspace分支，当前工作目录为master"></a>合并workspace分支，当前工作目录为master</h2><p><code>$ git merge workspace</code></p>
<h2 id="合并完成后，没有出现冲突，删除workspace分支"><a href="#合并完成后，没有出现冲突，删除workspace分支" class="headerlink" title="合并完成后，没有出现冲突，删除workspace分支"></a>合并完成后，没有出现冲突，删除workspace分支</h2><p><code>$ git branch –d workspace</code></p>
<h2 id="拉去远程仓库的数据，语法为-git-fetch-remote-name"><a href="#拉去远程仓库的数据，语法为-git-fetch-remote-name" class="headerlink" title="拉去远程仓库的数据，语法为 git fetch [remote-name]"></a>拉去远程仓库的数据，语法为 git fetch [remote-name]</h2><p><code>$ git fetch</code></p>
<h2 id="fetch-会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并"><a href="#fetch-会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并" class="headerlink" title="fetch 会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并"></a>fetch 会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并</h2><p><code>$ git pull</code></p>
<h2 id="查看远程仓库的信息"><a href="#查看远程仓库的信息" class="headerlink" title="查看远程仓库的信息"></a>查看远程仓库的信息</h2><p><code>$ git remote show origin</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;git升级&quot;&gt;&lt;a href=&quot;#git升级&quot; class=&quot;headerlink&quot; title=&quot;git升级&quot;&gt;&lt;/a&gt;git升级&lt;/h2&gt;&lt;p&gt;&lt;code&gt;$ git clone git://git.kernel.org/p
    
    </summary>
    
      <category term="学习笔记" scheme="http://rawraw.info/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="http://rawraw.info/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>文件夹命名习惯</title>
    <link href="http://rawraw.info/2018-01-07-name.html"/>
    <id>http://rawraw.info/2018-01-07-name.html</id>
    <published>2018-01-07T04:36:28.000Z</published>
    <updated>2018-02-27T05:37:57.740Z</updated>
    
    <content type="html"><![CDATA[<p>常用的项目目录文件命名<br><a id="more"></a></p>
<h1 id="config"><a href="#config" class="headerlink" title="config"></a>config</h1><blockquote>
<p>配置文件</p>
</blockquote>
<h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><blockquote>
<p>静态资源</p>
</blockquote>
<h1 id="src-source"><a href="#src-source" class="headerlink" title="src,source"></a>src,source</h1><blockquote>
<p>源代码</p>
</blockquote>
<h1 id="examples，demo"><a href="#examples，demo" class="headerlink" title="examples，demo"></a>examples，demo</h1><blockquote>
<p>示例</p>
</blockquote>
<h1 id="docs"><a href="#docs" class="headerlink" title="docs"></a>docs</h1><blockquote>
<p>文档</p>
</blockquote>
<h1 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h1><blockquote>
<p>插件</p>
</blockquote>
<h1 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h1><blockquote>
<p>library,库文件</p>
</blockquote>
<h1 id="component"><a href="#component" class="headerlink" title="component"></a>component</h1><blockquote>
<p>组件</p>
</blockquote>
<h1 id="dist"><a href="#dist" class="headerlink" title="dist"></a>dist</h1><blockquote>
<p>distribution,打包编译后的文件</p>
<blockquote>
<p>less,sass,typescript,es6</p>
</blockquote>
</blockquote>
<h1 id="test-tests-test"><a href="#test-tests-test" class="headerlink" title="test,tests,test"></a>test,tests,<strong>test</strong></h1><blockquote>
<p>测试文件</p>
</blockquote>
<h2 id="benchmarks"><a href="#benchmarks" class="headerlink" title="benchmarks"></a>benchmarks</h2><blockquote>
<p>测试版本的性能变化</p>
</blockquote>
<h2 id="units-spec"><a href="#units-spec" class="headerlink" title="units,spec"></a>units,spec</h2><blockquote>
<p>单元测试</p>
</blockquote>
<h2 id="e2e"><a href="#e2e" class="headerlink" title="e2e"></a>e2e</h2><blockquote>
<p>端对端测试</p>
</blockquote>
<h1 id="build-script"><a href="#build-script" class="headerlink" title="build,script"></a>build,script</h1><blockquote>
<p>构建脚本</p>
</blockquote>
<h1 id="utils-tools-helpers"><a href="#utils-tools-helpers" class="headerlink" title="utils,tools,helpers"></a>utils,tools,helpers</h1><blockquote>
<p>工具代码</p>
</blockquote>
<h1 id="models-views-controllers-middlewares"><a href="#models-views-controllers-middlewares" class="headerlink" title="models,views,controllers,middlewares"></a>models,views,controllers,middlewares</h1><blockquote>
<p>MVC，中间件</p>
</blockquote>
<h1 id="router"><a href="#router" class="headerlink" title="router"></a>router</h1><blockquote>
<p>路由</p>
</blockquote>
<h1 id="server"><a href="#server" class="headerlink" title="server"></a>server</h1><blockquote>
<p>服务端代码</p>
</blockquote>
<h1 id="adapters"><a href="#adapters" class="headerlink" title="adapters"></a>adapters</h1><blockquote>
<p>适配器模式</p>
</blockquote>
<h1 id="legacy"><a href="#legacy" class="headerlink" title="legacy"></a>legacy</h1><blockquote>
<p>兼容历史版本或者浏览器的代码</p>
</blockquote>
<h1 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h1><blockquote>
<p>命令脚本，命令行工具</p>
</blockquote>
<h1 id="common"><a href="#common" class="headerlink" title="common"></a>common</h1><blockquote>
<p>公用文件</p>
</blockquote>
<h1 id="packages"><a href="#packages" class="headerlink" title="packages"></a>packages</h1><blockquote>
<p>打包多个npm包,减小体积</p>
</blockquote>
<h1 id="core"><a href="#core" class="headerlink" title="core"></a>core</h1><blockquote>
<p>核心文件</p>
</blockquote>
<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><blockquote>
<p>杂项</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的项目目录文件命名&lt;br&gt;
    
    </summary>
    
      <category term="规范" scheme="http://rawraw.info/categories/%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="命名" scheme="http://rawraw.info/tags/%E5%91%BD%E5%90%8D/"/>
    
      <category term="规范" scheme="http://rawraw.info/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>移动端语音播报问题集合</title>
    <link href="http://rawraw.info/2017-12-19-sound.html"/>
    <id>http://rawraw.info/2017-12-19-sound.html</id>
    <published>2017-12-19T06:16:01.000Z</published>
    <updated>2017-12-19T06:41:16.884Z</updated>
    
    <content type="html"><![CDATA[<p>突然想到之前一个项目的问题，当时手忙脚乱糊弄地解决了一下。<br>打卡签到，播放“XXX,签到成功”。<br>判断一个人的语音提示是否播报完成？或者打断？</p>
<p><div align="center"><br><img src="/images/bg/0059.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="文本生成语音"><a href="#文本生成语音" class="headerlink" title="文本生成语音"></a>文本生成语音</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> speaker = <span class="keyword">new</span> <span class="built_in">window</span>.SpeechSynthesisUtterance();</div><div class="line"><span class="keyword">var</span> speakTimer,</div><div class="line">    stopTimer;</div><div class="line"><span class="comment">// 开始播报</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">speakText</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    clearTimeout(speakTimer);</div><div class="line">    <span class="built_in">window</span>.speechSynthesis.cancel();</div><div class="line">    speakTimer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        speaker.text = text;</div><div class="line">        <span class="built_in">window</span>.speechSynthesis.speak(speaker);</div><div class="line">    &#125;, <span class="number">200</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 停止播报</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopSpeak</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    clearTimeout(stopTimer);</div><div class="line">    clearTimeout(speakTimer);</div><div class="line">    stopTimer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">window</span>.speechSynthesis.cancel();</div><div class="line">    &#125;, <span class="number">20</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="SpeechSynthesis"><a href="#SpeechSynthesis" class="headerlink" title="SpeechSynthesis"></a>SpeechSynthesis</h3><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>paused</td>
<td>是否暂停</td>
</tr>
<tr>
<td>pending</td>
<td>是否处理中</td>
</tr>
<tr>
<td>speaking</td>
<td>是否朗读中</td>
</tr>
<tr>
<td>onvoiceschanged</td>
<td>声音变化时触发</td>
</tr>
<tr>
<td>cancel()</td>
<td>情况待朗读队列</td>
</tr>
<tr>
<td>getVoices()</td>
<td>获取浏览器支持的语音包列表</td>
</tr>
<tr>
<td>pause()</td>
<td>暂停</td>
</tr>
<tr>
<td>resume()</td>
<td>重新开始</td>
</tr>
<tr>
<td>speak()</td>
<td>读合成的语音，参数必须</td>
</tr>
</tbody>
</table>
<h3 id="SpeechSynthesisUtterance"><a href="#SpeechSynthesisUtterance" class="headerlink" title="SpeechSynthesisUtterance"></a>SpeechSynthesisUtterance</h3><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>lang</td>
<td>语言</td>
</tr>
<tr>
<td>pitch</td>
<td>音高</td>
</tr>
<tr>
<td>rate</td>
<td>语速</td>
</tr>
<tr>
<td>text</td>
<td>文本</td>
</tr>
<tr>
<td>voice</td>
<td>声音</td>
</tr>
<tr>
<td>volume</td>
<td>音量</td>
</tr>
<tr>
<td>onboundary</td>
<td>单词或句子边界触发，即分隔处触发</td>
</tr>
<tr>
<td>onend</td>
<td>结束时触发</td>
</tr>
<tr>
<td>onerror</td>
<td>错误时触发</td>
</tr>
<tr>
<td>onmark</td>
<td></td>
</tr>
<tr>
<td>onpause</td>
<td>暂停时触发</td>
</tr>
<tr>
<td>onresume</td>
<td>重新播放时触发</td>
</tr>
<tr>
<td>onstart</td>
<td>开始时触发</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然想到之前一个项目的问题，当时手忙脚乱糊弄地解决了一下。&lt;br&gt;打卡签到，播放“XXX,签到成功”。&lt;br&gt;判断一个人的语音提示是否播报完成？或者打断？&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0059.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="待解决" scheme="http://rawraw.info/categories/%E5%BE%85%E8%A7%A3%E5%86%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>2018前端学习计划</title>
    <link href="http://rawraw.info/2017-12-19-plan2018.html"/>
    <id>http://rawraw.info/2017-12-19-plan2018.html</id>
    <published>2017-12-19T05:14:03.000Z</published>
    <updated>2017-12-19T06:28:20.730Z</updated>
    
    <content type="html"><![CDATA[<p>再堕落下去，要是个废人了。开始好好学习，天天向上咯！<br>小小列个清单先~</p>
<p><div align="center"><br><img src="/images/bg/0057.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="旧的要巩固"><a href="#旧的要巩固" class="headerlink" title="旧的要巩固"></a>旧的要巩固</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol>
<li>结构：HTML/HTML5</li>
<li>样式：CSS/CSS3/canvas/svg/vr/webGL</li>
<li>逻辑：JavaScript/jQuery</li>
<li>地图：摸清天地图，一切地图不是事儿</li>
<li>数据:数据库/php(后台小哥哥的东西，看看会cv就好)</li>
<li>服务：node</li>
<li>兼容性：web和移动端/各浏览器</li>
</ol>
<h2 id="框架全家桶"><a href="#框架全家桶" class="headerlink" title="框架全家桶"></a>框架全家桶</h2><ol>
<li>vue+vuex+vue+router+axios</li>
<li>react+</li>
<li>Angular(找时间看2啊)</li>
</ol>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><ol>
<li>LESS/SASS</li>
<li>TypeSript</li>
<li>webpack+npm/yarn</li>
</ol>
<h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ol>
<li>es6</li>
</ol>
<h2 id="小技能"><a href="#小技能" class="headerlink" title="小技能"></a>小技能</h2><ol>
<li>gif录制，用啥软件来着，记得回去翻翻</li>
</ol>
<h1 id="新的要学学学学学！嘿嘿"><a href="#新的要学学学学学！嘿嘿" class="headerlink" title="新的要学学学学学！嘿嘿~"></a>新的要学学学学学！嘿嘿~</h1><h2 id="特效，公式撸起来"><a href="#特效，公式撸起来" class="headerlink" title="特效，公式撸起来"></a>特效，公式撸起来</h2><ol>
<li>贝塞尔曲线原理</li>
<li>视差原理</li>
<li>阻尼公式</li>
</ol>
<h2 id="新框架"><a href="#新框架" class="headerlink" title="新框架"></a>新框架</h2><ol>
<li>express框架</li>
<li>koa框架</li>
<li>egg.js(天猫)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;再堕落下去，要是个废人了。开始好好学习，天天向上咯！&lt;br&gt;小小列个清单先~&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0057.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="计划" scheme="http://rawraw.info/categories/%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="daydayup" scheme="http://rawraw.info/tags/daydayup/"/>
    
  </entry>
  
  <entry>
    <title>毒鸡汤</title>
    <link href="http://rawraw.info/2017-12-08-soup.html"/>
    <id>http://rawraw.info/2017-12-08-soup.html</id>
    <published>2017-12-08T07:54:04.000Z</published>
    <updated>2017-12-08T07:57:34.070Z</updated>
    
    <content type="html"><![CDATA[<p>在家里闲置了很久的大脑，可能就是鸡汤喝得太多了吧</p>
<p><div align="center"><br><img src="/images/bg/0033.jpg" alt="“封面”"><br></div><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在家里闲置了很久的大脑，可能就是鸡汤喝得太多了吧&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0033.jpg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="杂" scheme="http://rawraw.info/categories/%E6%9D%82/"/>
    
    
      <category term="杂" scheme="http://rawraw.info/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript要仔细学之二//闭包</title>
    <link href="http://rawraw.info/2017-06-28-js02.html"/>
    <id>http://rawraw.info/2017-06-28-js02.html</id>
    <published>2017-06-28T01:48:15.000Z</published>
    <updated>2017-06-28T02:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>不得不看之闭包–<br><a id="more"></a></p>
<h1 id="一个栗子"><a href="#一个栗子" class="headerlink" title="一个栗子"></a>一个栗子</h1><blockquote>
<p>问题:点击列表输出对应的索引（用JS，非JQ）</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>嘤嘤嘤<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>嘿嘿嘿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>啦啦啦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>略略略<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>嘻嘻嘻<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>呵呵呵<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>哒哒哒<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>嘁嘁嘁<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>哟哟哟<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可能有小可爱会这样做:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'ul li'</span>);</div><div class="line"><span class="keyword">var</span> len = lis.length;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">	lis[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(i);</div><div class="line">	&#125;, <span class="literal">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果是，不管点击哪个列表，结果输出的都是10。</p>
<ol>
<li>var声明的变量是函数作用域的，而不是块级作用域的。也就是说，for循环10次，每次都是改变同一个i，所以它的值会从0一直加到10。</li>
<li>闭包保存的是外部变量的引用，而不是值。也就是说，循环10次监听器创建了10 个闭包，它们里面的i引用的是同一个啊。所以全部都指向了10。</li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="let替代var"><a href="#let替代var" class="headerlink" title="let替代var"></a>let替代var</h3><p>但是涉及到es6,出于兼容性的考虑，还要做转译，还是微微有点不开心<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'ul li'</span>);</div><div class="line"><span class="keyword">var</span> len = lis.length;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">	lis[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(i);</div><div class="line">	&#125;, <span class="literal">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="立即执行函数-切断闭包"><a href="#立即执行函数-切断闭包" class="headerlink" title="立即执行函数(切断闭包)"></a>立即执行函数(切断闭包)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'ul li'</span>);</div><div class="line"><span class="keyword">var</span> len = lis.length;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">	(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">		lis[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(i);</div><div class="line">		&#125;, <span class="literal">false</span>);</div><div class="line">	&#125;)(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="事件委托-避开闭包"><a href="#事件委托-避开闭包" class="headerlink" title="事件委托(避开闭包)"></a>事件委托(避开闭包)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</div><div class="line"><span class="keyword">var</span> lis = ul.querySelectorAll(<span class="string">'li'</span>); </div><div class="line">ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> target = e.target;</div><div class="line">	<span class="keyword">if</span>(target.nodeName.toLowerCase() === <span class="string">'li'</span>) &#123;</div><div class="line">		<span class="built_in">console</span>.log([].indexOf.call(lis, target));</div><div class="line">	&#125;</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不得不看之闭包–&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript要仔细学" scheme="http://rawraw.info/categories/JavaScript%E8%A6%81%E4%BB%94%E7%BB%86%E5%AD%A6/"/>
    
    
      <category term="JavaScript" scheme="http://rawraw.info/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>鹅厂小事件</title>
    <link href="http://rawraw.info/2017-06-21-tencent.html"/>
    <id>http://rawraw.info/2017-06-21-tencent.html</id>
    <published>2017-06-21T02:58:49.000Z</published>
    <updated>2017-06-21T06:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>鹅厂啊鹅厂</p>
<p><div align="center"><br><img src="/images/bg/0048.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="鹅厂企业邮箱"><a href="#鹅厂企业邮箱" class="headerlink" title="鹅厂企业邮箱"></a>鹅厂企业邮箱</h1><p>鹅厂企业邮箱pop设置：pop.exmail.qq.comci</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鹅厂啊鹅厂&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0048.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://rawraw.info/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="widen" scheme="http://rawraw.info/tags/widen/"/>
    
  </entry>
  
  <entry>
    <title>Javascript模块规范:CommonJS和AMD</title>
    <link href="http://rawraw.info/2017-06-20-modulerule.html"/>
    <id>http://rawraw.info/2017-06-20-modulerule.html</id>
    <published>2017-06-20T08:49:47.000Z</published>
    <updated>2017-06-20T09:10:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前，通行的Javascript模块规范有两种：CommonJS和AMD。</p>
<p><div align="center"><br><img src="/images/bg/0010.jpg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><blockquote>
<p>在浏览器环境下，没有模块也不是特别大的问题，毕竟网页程序的复杂性有限；但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。node.js的模块系统，就是参照CommonJS规范实现的。在CommonJS中，有一个全局性方法require()，用于加载模块。</p>
</blockquote>
<p>假定有一个数学模块math.js，就可以像下面这样加载。<br><figure class="highlight js"><figcaption><span>[math.js]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>);</div><div class="line">math.add(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 5 ,调用模块提供的方法</span></div></pre></td></tr></table></figure></p>
<p>CommonJS规范不适用于浏览器环境。第二行math.add(2, 3)，在第一行require(‘math’)之后运行，因此必须等math.js加载完成。浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是AMD规范诞生的背景。</p>
<p>##　AMD规范</p>
<blockquote>
<p>全称：Asynchronous Module Definition（异步模块定义）<br>它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>
</blockquote>
<p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：<br><code>require([module], callback);</code><br>上述的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　<span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>) </span>&#123;</div><div class="line">　　　　math.add(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line">　　&#125;);</div></pre></td></tr></table></figure></p>
<p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前，通行的Javascript模块规范有两种：CommonJS和AMD。&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0010.jpg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://rawraw.info/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="JavaScript" scheme="http://rawraw.info/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>rawraw的github</title>
    <link href="http://rawraw.info/2017-06-20-github.html"/>
    <id>http://rawraw.info/2017-06-20-github.html</id>
    <published>2017-06-20T02:18:03.000Z</published>
    <updated>2017-06-20T02:35:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>rawraw的github项目的快速链接</p>
<p><div align="center"><br><img src="/images/bg/0044.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="bundler"><a href="#bundler" class="headerlink" title="bundler"></a>bundler</h1><ul>
<li><a href="http://www.rawraw.info/browserify-learn/" target="_blank" rel="external">browserify</a></li>
<li><a href="http://www.rawraw.info/webpack-learn/" target="_blank" rel="external">webpack</a></li>
<li><a href="http://www.rawraw.info/RequireJS-learn/" target="_blank" rel="external">RequireJS/AMD</a></li>
</ul>
<h1 id="taskrunner"><a href="#taskrunner" class="headerlink" title="taskrunner"></a>taskrunner</h1><ul>
<li><a href="http://www.rawraw.info/Grunt-learn/" target="_blank" rel="external">Grunt</a></li>
<li><a href="http://www.rawraw.info/Gulp-learn/" target="_blank" rel="external">Gulp</a></li>
</ul>
<p><a href="https://segmentfault.com/a/1190000005706707" target="_blank" rel="external">git常用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rawraw的github项目的快速链接&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0044.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="链接" scheme="http://rawraw.info/categories/%E9%93%BE%E6%8E%A5/"/>
    
    
      <category term="链接" scheme="http://rawraw.info/tags/%E9%93%BE%E6%8E%A5/"/>
    
      <category term="github" scheme="http://rawraw.info/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>HTML5/JavaScript/CSS书写规范</title>
    <link href="http://rawraw.info/2017-06-14-norm.html"/>
    <id>http://rawraw.info/2017-06-14-norm.html</id>
    <published>2017-06-14T06:46:21.000Z</published>
    <updated>2017-06-19T07:51:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为强迫症，就是特别喜欢介个样子//</p>
<p><div align="center"><br><img src="/images/bg/0047.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h1 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5 standardization<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">//type属性：省略</div></pre></td></tr></table></figure>
<h1 id="区分浏览器"><a href="#区分浏览器" class="headerlink" title="区分浏览器"></a>区分浏览器</h1><p>no-js标签是需要与Modernizr等类库配合使用的<br><code>&lt;script src=&quot;js/libs/modernizr-2.5.0.min.js&quot;&gt;&lt;/script&gt;</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if lt IE 7]&gt; &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="zh"&gt; &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 7]&gt;    &lt;html class="no-js lt-ie9 lt-ie8" lang="zh"&gt; &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 8]&gt;    &lt;html class="no-js lt-ie9" lang="zh"&gt; &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"no-js"</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span> <span class="comment">&lt;!--&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>避免IE6条件注释引起的高版本IE文件阻塞问题</li>
<li>与Modernizr等特征检测类库使用相同的class，更具备通用性</li>
<li>优于使用CSS Hack</li>
</ul>
<h2 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a>嵌套规则</h2><ul>
<li>块元素可以包含内联元素或某些块元素，但内联元素却不能包含块元素，它只能包含其它的内联元素；</li>
<li><p>里面不能放块级元素；</p></li>
<li>块级元素与块级元素并列、内嵌元素与内嵌元素并列；</li>
</ul>
<h2 id="文档内容"><a href="#文档内容" class="headerlink" title="文档内容"></a>文档内容</h2><ul>
<li>自定义属性：<code>data-*</code></li>
<li>不要使用内联样式</li>
<li>不要使用<em>和<strong>,用css来控制。不要使用<i>和<b>，HTML5不赞成使用</b></i></strong></em></li>
</ul>
<h2 id="实体字符引用"><a href="#实体字符引用" class="headerlink" title="实体字符引用"></a>实体字符引用</h2><table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">实体名</th>
<th style="text-align:center">实体数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">“</td>
<td style="text-align:center"><code>&amp;quot;</code></td>
<td style="text-align:center"><code>&amp;#34;</code></td>
</tr>
<tr>
<td style="text-align:center">‘</td>
<td style="text-align:center"><code>&amp;apos;(IE不支持)</code></td>
<td style="text-align:center"><code>&amp;#39;</code></td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center"><code>&amp;amp;</code></td>
<td style="text-align:center"><code>&amp;#38;</code></td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center"><code>&amp;gt;</code></td>
<td style="text-align:center"><code>&amp;#62;</code></td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center"><code>&amp;lt;</code></td>
<td style="text-align:center"><code>&amp;#60;</code></td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center"><code>&amp;nbsp;</code></td>
<td style="text-align:center"><code>&amp;#160;</code></td>
</tr>
<tr>
<td style="text-align:center">&emsp;</td>
<td style="text-align:center"><code>&amp;emsp;</code></td>
<td style="text-align:center"><code>&amp;#12288;</code></td>
</tr>
<tr>
<td style="text-align:center">￥&yen;</td>
<td style="text-align:center"><code>&amp;yen;</code></td>
<td style="text-align:center"><code>&amp;#165;</code></td>
</tr>
<tr>
<td style="text-align:center">&brvbar;</td>
<td style="text-align:center"><code>&amp;brvbar;</code></td>
<td style="text-align:center"><code>&amp;#39;</code></td>
</tr>
<tr>
<td style="text-align:center">&copy;</td>
<td style="text-align:center"><code>&amp;copy;</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">&reg;</td>
<td style="text-align:center"><code>&amp;reg;</code></td>
<td style="text-align:center"><code>&amp;#169;</code></td>
</tr>
<tr>
<td style="text-align:center">&trade;</td>
<td style="text-align:center"><code>&amp;trade;</code></td>
<td style="text-align:center"><code>&amp;#8428;</code></td>
</tr>
<tr>
<td style="text-align:center">&middot;</td>
<td style="text-align:center"><code>&amp;middot;</code></td>
<td style="text-align:center"><code>&amp;#183;</code></td>
</tr>
<tr>
<td style="text-align:center">&laquo;</td>
<td style="text-align:center"><code>&amp;laquo;</code></td>
<td style="text-align:center"><code>&amp;#171;</code></td>
</tr>
<tr>
<td style="text-align:center">&raquo;</td>
<td style="text-align:center"><code>&amp;raquo;</code></td>
<td style="text-align:center"><code>&amp;#187;</code></td>
</tr>
<tr>
<td style="text-align:center">&deg;</td>
<td style="text-align:center"><code>&amp;deg;</code></td>
<td style="text-align:center"><code>&amp;#176;</code></td>
</tr>
<tr>
<td style="text-align:center">&times;</td>
<td style="text-align:center"><code>&amp;times;</code></td>
<td style="text-align:center"><code>&amp;#215;</code></td>
</tr>
<tr>
<td style="text-align:center">&divide;</td>
<td style="text-align:center"><code>&amp;divide;</code></td>
<td style="text-align:center"><code>&amp;#247;</code></td>
</tr>
<tr>
<td style="text-align:center">&permil;</td>
<td style="text-align:center"><code>&amp;permil;</code></td>
<td style="text-align:center"><code>&amp;#8240;</code></td>
</tr>
</tbody>
</table>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul>
<li>给图片添加width和height，提升页面加载速度</li>
<li>给所有img添加alt属性</li>
<li>不要使用或尽量少用gif文件</li>
</ul>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="引用结构"><a href="#引用结构" class="headerlink" title="引用结构"></a>引用结构</h2><p>按照顺序引入<br>CSS 一律写在 CSS 文件中，原则上不写内联样式，不直接为标签添加样式（reset 除外）。</p>
<ul>
<li>基础框架（reset / grid …）</li>
<li>通用模块（theme/ common…）</li>
<li>页面样式（page…）</li>
</ul>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul>
<li>CSS对大小写敏感</li>
<li>不采用驼峰式命名，不用中文拼音</li>
<li>不允许使用具体的样式名称命名，也不应包含颜色、位置等与现实效果相关的信息。</li>
<li>加上适当的命名空间（前缀），以避免命名冲突。命名空间不使用单个字母，以免与通用样式冲突。</li>
</ul>
<h3 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h3><p>CSS 文件命名由小写字母、下划线（_）组成。</p>
<h3 id="选择器命名"><a href="#选择器命名" class="headerlink" title="选择器命名"></a>选择器命名</h3><p>CSS 文件命名由小写字母、中划线（-）组成。<br>|布局（grid） .g-|模块（module） .m-|元件（unit）|功能（function）|状态 .z-|皮肤（skin） .s-|JS选择器 .j-|</p>
<h2 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h2><ul>
<li><code>;</code>分行书写</li>
<li>属性值为 0 时，单位可以省略。</li>
<li>属性值为小数时，小数点之前的 0 不可以省略。</li>
<li>省略 url 中的引号，其他需要引号的地方使用单引号。</li>
</ul>
<h2 id="书写顺序"><a href="#书写顺序" class="headerlink" title="书写顺序"></a>书写顺序</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>| 显示属性 | display, visibility, position, float, clear, list-style, top 等 |<br>| 自身属性 | width, height, margin, padding, border, overflow 等 |<br>| 文本及修饰属性 | font, text-align, text-decoration, vertical-align, white-space, color, background 等 |<br>| CSS3 属性 | border-radius, box-shadow, gradients, transforms, animations 等 |</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>a:link -&gt; a:visited -&gt; a:hover -&gt; a:active</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="合并选择器"><a href="#合并选择器" class="headerlink" title="合并选择器"></a>合并选择器</h3><h3 id="属性值缩写"><a href="#属性值缩写" class="headerlink" title="属性值缩写"></a>属性值缩写</h3><ul>
<li>margin</li>
<li>padding</li>
<li>border</li>
<li>background</li>
<li>font</li>
<li>color</li>
<li>list-style</li>
</ul>
<h2 id="避免耗性能的属性"><a href="#避免耗性能的属性" class="headerlink" title="避免耗性能的属性"></a>避免耗性能的属性</h2><ul>
<li><code>width: expression(this.width&gt;100?&#39;100px&#39;:&#39;auto&#39;);</code></li>
<li><code>filter: alpha(opacity=50);</code></li>
</ul>
<h3 id="图片合并（sprite）"><a href="#图片合并（sprite）" class="headerlink" title="图片合并（sprite）"></a>图片合并（sprite）</h3><h3 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h3><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用===/!=="></a>使用<code>===</code>/<code>!==</code></h2><p><code>==</code>和<code>!=</code>不判断类型</p>
<h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><p>在判断函数是否为空的情况下，使用<code>==</code>或<code>!=</code>是可以的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果foo没有被初始化，它默认的值是undefined而不是null。当然underfined更不会等于null了。</span></div><div class="line"><span class="comment">//因此这种情况应该使用==和!=。</span></div><div class="line"><span class="keyword">if</span> (foo == <span class="literal">null</span>) &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="DELETE在数组中"><a href="#DELETE在数组中" class="headerlink" title="DELETE在数组中"></a><code>DELETE</code>在数组中</h2><p>数组可以被<code>DELETE</code>，但是会留下<code>undefined</code>元素。<br>可以用shift( )/pop( )/splice(index,num)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span> ];</div><div class="line"><span class="keyword">delete</span> myArray[<span class="number">2</span>]; </div><div class="line"><span class="comment">// Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']</span></div><div class="line"><span class="built_in">console</span>.log(myArray[<span class="number">2</span>]); <span class="comment">// 'undefined'</span></div></pre></td></tr></table></figure></p>
<h2 id="for-in-的循环在每次操作前需要进行过滤判断"><a href="#for-in-的循环在每次操作前需要进行过滤判断" class="headerlink" title="for...in..的循环在每次操作前需要进行过滤判断"></a><code>for...in..</code>的循环在每次操作前需要进行过滤判断</h2><p>“for … in”这种循环允许开发人员按照属性的名字遍历对象。不幸的是，这个属性的集合包括了对象自身和对象继承的对象的所有属性。如果程序不考虑这点就会出现错误。都应该包括一个if判断来过滤你需要的属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (name <span class="keyword">in</span> object) &#123;</div><div class="line">    <span class="keyword">if</span> (object.hasOwnProperty(name)) &#123;</div><div class="line">        doSomething(name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="NaN不要出现在比较中"><a href="#NaN不要出现在比较中" class="headerlink" title="NaN不要出现在比较中"></a><code>NaN</code>不要出现在比较中</h2><p>NAN不等于包括自身在内的任何值。因此与NAN作比较是得不到你需要的结果的，但是这种错误有可能会出现。<br>事实上，判断值是否等于NAN最好的方法就是和它自己作比较即NAN!==NAN，因为正常的变量都是等于自身的，如果不等于自身成立，就说明这个值是NAN。</p>
<h2 id="保证函数调用时传入的参数都被使用"><a href="#保证函数调用时传入的参数都被使用" class="headerlink" title="保证函数调用时传入的参数都被使用"></a>保证函数调用时传入的参数都被使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    compute(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line">doSomething(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    print(a + <span class="string">' '</span> + b);</div><div class="line">&#125;</div><div class="line">say(<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'!'</span>);</div></pre></td></tr></table></figure>
<h2 id="选择器得到的结果一定要用LENGTH判断"><a href="#选择器得到的结果一定要用LENGTH判断" class="headerlink" title="选择器得到的结果一定要用LENGTH判断"></a>选择器得到的结果一定要用LENGTH判断</h2><p>无论是否找到该对象，选择器总是返回一个对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($(<span class="string">'.test'</span>)) &#123;</div><div class="line">       <span class="comment">// ...</span></div><div class="line">     &#125;</div><div class="line"><span class="keyword">if</span> ($(<span class="string">'.test'</span>).length &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="comment">//  ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="用逻辑短路防止出现空的错误"><a href="#用逻辑短路防止出现空的错误" class="headerlink" title="用逻辑短路防止出现空的错误"></a>用逻辑短路防止出现空的错误</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; str.length == <span class="number">0</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'String is empty'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (str != <span class="literal">undefined</span> &amp;&amp; str.length == <span class="number">0</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'String is empty'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (str == <span class="literal">null</span> || str.length &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'String is not empty'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (str == <span class="literal">undefined</span> || str.length &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'String is not empty'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h2><ul>
<li>用<code>null</code>,不要用<code>undefined</code>（尚未创建）赋值给变量。</li>
<li><code>var i = 0;i = i++;</code></li>
<li>parseInt函数有两个版本的，一个是只有一个参数的，而另一个是需要两个参数的。然而，旧版的浏览器不支持一个参数的parseInt方法。<br><code>parseInt(&quot;010&quot;, 10);</code></li>
</ul>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul>
<li><code>var input = $( &#39;form input[type=radio]&#39; );</code>代替<code>var input = $( &#39;form input:radio&#39; );</code></li>
<li><code>var $productIds = $(&#39;#products&#39;).find(&#39;div.id&#39;);</code>代替<code>var $productIds = $(&#39;#products div.id&#39;);</code></li>
<li>选择结果应该被保存，<code>var paragraph = $(&#39;p&#39;);paragraph.hide();paragraph.show();</code></li>
<li>尽量不要通配选择器<em><code>$( &#39;.buttons&#39; ).children();</code>代替`$( ‘.buttons &gt; </em>‘ ); `</li>
<li>使用<code>===</code>/<code>!==</code>，<code>==</code>和<code>!=</code>不判断类型</li>
</ul>
<h2 id="约定规范"><a href="#约定规范" class="headerlink" title="约定规范"></a>约定规范</h2><ul>
<li>每一条声明须要由“;”结尾</li>
<li>注释不应该写在每一行的最后面；一行代码不要太长（不超过80）；多分行分行</li>
<li>文件后面应该包含一个空行（这条规则会使得在利用一些工具，例如Git的时候配合的更好）</li>
<li>声明STRING类型的变量是需要用单引号</li>
<li>源代码文件应该有足够的注释（默认15%）</li>
<li>FUNCTIONS不应该有太多行（阈值：300），难以理解以及维护。</li>
<li>函数不应该有太多的参数（临界值为7）</li>
<li>一个表达式不应该有超过三个的操作符，以增加表达式的可读性。</li>
<li>循环不应该包括多余一个的BREAK或者CONTINUE语句，否则重构</li>
<li>结尾的逗号不应该被使用<code>var settings = {&#39;foo&#39;: oof,&#39;bar&#39;: rab};</code></li>
<li><code>ARGUMENTS.CALLER</code>和<code>ARGUMENTS.CALLEE</code>在ECMAScript5中，这两个函数在strict模式下都被禁止使用。在最新的Javascript版本中不建议被使用。</li>
<li>不要省略大括号（）if，作为范围控制</li>
<li><code>SWITCH</code>的每个条件结尾都要有<code>BREAK</code></li>
<li>发布版本中不要有<code>alert()</code>,<code>console</code>,给攻击者泄露敏感信息</li>
<li><code>//TODO</code>，<code>// FIXME</code>只在 开发过程中。</li>
<li>开发人员不能注释代码，因为会影响代码可读性。不再使用的代码就删除。</li>
<li><code>new</code>关键字应该和构造函数一起使用</li>
<li>不要使用<code>ARRAY</code>和<code>OBJECT</code>的构造方法。超过一个参数，会新建多个array.</li>
<li>不要重载内置对象</li>
<li>及时释放无用的储存</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为强迫症，就是特别喜欢介个样子//&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0047.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="小结" scheme="http://rawraw.info/categories/%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="summary" scheme="http://rawraw.info/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>API大全整理/from github</title>
    <link href="http://rawraw.info/2017-06-13-api.html"/>
    <id>http://rawraw.info/2017-06-13-api.html</id>
    <published>2017-06-13T09:47:54.000Z</published>
    <updated>2017-06-13T09:56:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶然发现的github上的API，蛮好用的吼、</p>
<p><div align="center"><br><img src="/images/bg/0038.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="emoji表情包大全"><a href="#emoji表情包大全" class="headerlink" title="emoji表情包大全"></a>emoji表情包大全</h1><p><code>https://api.github.com/emojis</code><br><code>GET</code><br>返回数据格式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"+1"</span>: <span class="string">"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png?v7"</span>,</div><div class="line">  <span class="string">"-1"</span>: <span class="string">"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44e.png?v7"</span>,</div><div class="line">  <span class="string">"100"</span>: <span class="string">"https://assets-cdn.github.com/images/icons/emoji/unicode/1f4af.png?v7"</span>,</div><div class="line">  <span class="string">"1234"</span>: <span class="string">"https://assets-cdn.github.com/images/icons/emoji/unicode/1f522.png?v7"</span>,</div><div class="line">  <span class="comment">//...</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h1 id="markdown编辑器"><a href="#markdown编辑器" class="headerlink" title="markdown编辑器"></a>markdown编辑器</h1><p><code>https://api.github.com/markdown</code><br><code>POST</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data = </div><div class="line">&#123;   <span class="string">"text"</span>:<span class="string">"#test"</span>,</div><div class="line">    <span class="string">"mode"</span>: <span class="string">"gfm"</span>,</div><div class="line">    <span class="string">"context"</span>: <span class="string">"github/gollum"</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>返回数据：html</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然发现的github上的API，蛮好用的吼、&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0038.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="干货" scheme="http://rawraw.info/categories/%E5%B9%B2%E8%B4%A7/"/>
    
    
      <category term="summary" scheme="http://rawraw.info/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript要仔细学之一//apply( )和call( )的区别</title>
    <link href="http://rawraw.info/2017-06-12-js01.html"/>
    <id>http://rawraw.info/2017-06-12-js01.html</id>
    <published>2017-06-12T08:18:56.000Z</published>
    <updated>2017-06-12T08:33:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>call</code>和<code>apply</code>可以改变<code>this</code>指针,即改变函数的作用域。<br><a id="more"></a></p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p><code>call</code>和<code>apply</code>方法的作用相同，就是参数不同。<br><code>call</code>和<code>apply</code>的第一个参数都是一样的，但是后面参数不同，<code>call</code>从第二个参数开始后面有许多参数，<code>apply</code>第二个参数必须是数组。<br><code>call([thisObj[,arg1[, arg2[,   [,.argN]]]]])</code><br><code>apply([thisObj[,argArray]])</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;call&lt;/code&gt;和&lt;code&gt;apply&lt;/code&gt;可以改变&lt;code&gt;this&lt;/code&gt;指针,即改变函数的作用域。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript要仔细学" scheme="http://rawraw.info/categories/JavaScript%E8%A6%81%E4%BB%94%E7%BB%86%E5%AD%A6/"/>
    
    
      <category term="JavaScript" scheme="http://rawraw.info/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>模块打包-bundler：browserify、webpack、RequireJS/AMD</title>
    <link href="http://rawraw.info/2017-05-26-bundler.html"/>
    <id>http://rawraw.info/2017-05-26-bundler.html</id>
    <published>2017-05-26T03:00:28.000Z</published>
    <updated>2017-06-21T03:04:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前比较完善的模块打包：browserify和webpack。webpack在browserify之后出现。</p>
<p><div align="center"><br><img src="/images/bg/0034.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="browserify"><a href="#browserify" class="headerlink" title="browserify"></a>browserify</h1><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h1 id="RequireJS-AMD"><a href="#RequireJS-AMD" class="headerlink" title="RequireJS/AMD"></a>RequireJS/AMD</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前比较完善的模块打包：browserify和webpack。webpack在browserify之后出现。&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0034.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://rawraw.info/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="widen" scheme="http://rawraw.info/tags/widen/"/>
    
  </entry>
  
  <entry>
    <title>任务流工具-taskrunner：Grunt、Gulp</title>
    <link href="http://rawraw.info/2017-05-26-task-runner.html"/>
    <id>http://rawraw.info/2017-05-26-task-runner.html</id>
    <published>2017-05-26T02:48:57.000Z</published>
    <updated>2017-06-21T03:04:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前比较完善的任务流工具：Grunt和Gulp。Gulp在Grunt之后出现，有Grunt的优点，同时增加了新特性。</p>
<p><div align="center"><br><img src="/images/bg/0036.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm install grunt-cli -g</code></p>
<h1 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p><code>npm install gulp-cli -g</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前比较完善的任务流工具：Grunt和Gulp。Gulp在Grunt之后出现，有Grunt的优点，同时增加了新特性。&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0036.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://rawraw.info/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="widen" scheme="http://rawraw.info/tags/widen/"/>
    
  </entry>
  
  <entry>
    <title>design patterns - JavaScript设计模式</title>
    <link href="http://rawraw.info/2017-05-25-design-patterns.html"/>
    <id>http://rawraw.info/2017-05-25-design-patterns.html</id>
    <published>2017-05-25T09:16:06.000Z</published>
    <updated>2017-06-09T08:08:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>哎，最不想整理的就是这一块了</p>
<p><div align="center"><br><img src="/images/bg/0040.jpeg" alt="“封面”"><br></div><br><a id="more"></a><br>最初在设计模式 一书中，许多设计模式都鼓励使用松散耦合。在更改一个代码片段时，就会发生问题，系统其他部分 —— 曾认为完全不相关的部分中也有可能出现级联破坏。该问题在于紧密耦合 。系统某个部分中的函数和类严重依赖于系统的其他部分中函数和类的行为和结构。您需要一组模式，使这些类能够相互通信，但不希望将它们紧密绑定在一起，以避免出现联锁。</p>
<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BuyHero</span>(<span class="params">name,type,price</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">	obj.name = name;</div><div class="line">	obj.age = type;</div><div class="line">	obj.price = price;</div><div class="line">	obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> h1 = <span class="keyword">new</span> BuyHero(<span class="string">'Teemo'</span>,<span class="string">'ADC'</span>,<span class="string">'6300'</span>);</div><div class="line"><span class="keyword">var</span> h2 = <span class="keyword">new</span> BuyHero(<span class="string">'Amumu'</span>,<span class="string">'Jungle'</span>,<span class="string">'3100'</span>);</div><div class="line"><span class="comment">//返回都是object 无法识别对象的类型，哪个对象的实列</span></div><div class="line">   <span class="built_in">console</span>.log(<span class="keyword">typeof</span> h1);  <span class="comment">// object</span></div><div class="line">   <span class="built_in">console</span>.log(<span class="keyword">typeof</span> h2);  <span class="comment">// object</span></div><div class="line">   <span class="built_in">console</span>.log(h1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="复杂工厂模式"><a href="#复杂工厂模式" class="headerlink" title="复杂工厂模式"></a>复杂工厂模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义英雄池的构造函数</span></div><div class="line"><span class="keyword">var</span> League = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.method = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">League.prototype = &#123;</div><div class="line">	<span class="attr">constructor</span>: League,</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 买英雄这个方法</div><div class="line">	 * @param &#123;name&#125; 英雄名字</div><div class="line">	 */</div><div class="line">	buyHero: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> hero = <span class="keyword">this</span>.createHero(name);</div><div class="line">		<span class="comment">// 执行Q、W...技能，哦，业务逻辑</span></div><div class="line">		hero.Q();</div><div class="line">		hero.W();</div><div class="line">		<span class="keyword">return</span> hero;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">createHero</span>: <span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"父类是抽象类不能直接调用，需要子类重写该方法"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 实现原型继承</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">Sub,Sup</span>) </span>&#123;<span class="comment">//Sub表示子类，Sup表示超类</span></div><div class="line">	<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;<span class="comment">// 首先定义一个空函数</span></div><div class="line">	F.prototype = Sup.prototype;<span class="comment">// 设置空函数的原型为超类的原型</span></div><div class="line">	Sub.prototype = <span class="keyword">new</span> F();<span class="comment">// 实例化空函数，并把超类原型引用传递给子类</span></div><div class="line">	Sub.prototype.constructor = Sub;<span class="comment">// 重置子类原型的构造器为子类自身</span></div><div class="line">	Sub.sup = Sup.prototype;<span class="comment">// 在子类中保存超类的原型,避免子类与超类耦合</span></div><div class="line">	<span class="keyword">if</span>(Sup.prototype.constructor === <span class="built_in">Object</span>.prototype.constructor) &#123;</div><div class="line">		Sup.prototype.constructor = Sup;<span class="comment">// 检测超类原型的构造器是否为原型自身</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> HeroChild = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="comment">// 继承构造函数父类中的属性和方法</span></div><div class="line">	League.call(<span class="keyword">this</span>,name);</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 子类继承父类原型方法</span></div><div class="line">extend(HeroChild,League);</div><div class="line"><span class="comment">// BicycleChild 子类重写父类的方法</span></div><div class="line">HeroChild.prototype.createHero = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> Q = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"执行Q业务操作"</span>);</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">var</span> W = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"执行W业务操作"</span>);</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">Q</span>: Q,</div><div class="line">		<span class="attr">W</span>: W</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> Teemo = <span class="keyword">new</span> HeroChild(<span class="string">"提莫"</span>);</div><div class="line">   <span class="built_in">console</span>.log(Teemo);</div><div class="line">   <span class="built_in">console</span>.log(Teemo.name);<span class="comment">//提莫</span></div><div class="line">   Teemo.buyHero();</div></pre></td></tr></table></figure>
<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><blockquote>
<p>父类是一个抽象类，不能被实列化,将其成员对象的实列化推迟到子类中，子类可以重写父类接口方法以便创建的时候指定自己的对象类型。<br>子类之间是相互独立的。</p>
</blockquote>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>解决多个类似对象声明的问题;解决实列化对象产生重复的问题。在父类中编写一些相同的方法代码,在子类中重写该父类的方法，去实现具体的业务逻辑。</p>
<h3 id="1"><a href="#1" class="headerlink" title="1/"></a>1/</h3><p>弱化对象间的耦合，防止代码的重复。在一个方法中进行类的实例化，可以消除重复性的代码。</p>
<h3 id="2"><a href="#2" class="headerlink" title="2/"></a>2/</h3><p>重复性的代码可以放在父类去编写，子类继承于父类的所有成员属性和方法，子类只专注于实现自己的业务逻辑。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>无法获取对象类型</p>
<h1 id="单体模式"><a href="#单体模式" class="headerlink" title="单体模式"></a>单体模式</h1><h2 id="封装单体模式"><a href="#封装单体模式" class="headerlink" title="封装单体模式"></a>封装单体模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 写法一</span></div><div class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.instance = <span class="literal">null</span>;</div><div class="line">&#125;;</div><div class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 获取实例对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(!<span class="keyword">this</span>.instance) &#123;</div><div class="line">		<span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.instance;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 写法二</span></div><div class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">       <span class="keyword">this</span>.name = name;</div><div class="line">   &#125;;</div><div class="line">   Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 获取实例对象</span></div><div class="line">   <span class="keyword">var</span> getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> instance = <span class="literal">null</span>;</div><div class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span>(!instance) &#123;</div><div class="line">               instance = <span class="keyword">new</span> Singleton(name);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> instance;</div><div class="line">       &#125;</div><div class="line">   &#125;)();</div><div class="line"><span class="comment">// 测试单体模式的实例</span></div><div class="line"><span class="keyword">var</span> a = getInstance(<span class="string">"aa"</span>);</div><div class="line"><span class="keyword">var</span> b = getInstance(<span class="string">"bb"</span>);</div><div class="line"><span class="built_in">console</span>.log(a===b);<span class="comment">// true,b的实例就是a的实例</span></div></pre></td></tr></table></figure>
<h2 id="使用代理实现单体模式"><a href="#使用代理实现单体模式" class="headerlink" title="使用代理实现单体模式"></a>使用代理实现单体模式</h2><p>具体的单体模式中的实例化类的事情交给代理函数去处理，这样做的好处是具体的业务逻辑分开了，代理只管代理的业务逻辑，在这里代理的作用是实例化对象，并且只实例化一次; 创建div代码只管创建div，其他的不管；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个div</span></div><div class="line"><span class="comment">//第一种</span></div><div class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.html = html;</div><div class="line">	<span class="keyword">this</span>.init();</div><div class="line">&#125;;</div><div class="line">CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">	div.innerHTML = <span class="keyword">this</span>.html;</div><div class="line">	<span class="built_in">document</span>.body.appendChild(div);</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 代理实现单体模式</span></div><div class="line"><span class="keyword">var</span> ProxyMode = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> instance;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(!instance) &#123;</div><div class="line">			instance = <span class="keyword">new</span> CreateDiv(<span class="string">"rawraw hello"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line">&#125;)();</div><div class="line"><span class="comment">//第二种</span></div><div class="line">   <span class="comment">// 代理实现单体模式</span></div><div class="line">   <span class="keyword">var</span> ProxyMode = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span> instance;</div><div class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span>(!instance) &#123;</div><div class="line">               instance = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">               instance.innerHTML = <span class="string">"rawraw hello"</span>;</div><div class="line">               <span class="built_in">document</span>.body.appendChild(instance);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> instance;</div><div class="line">       &#125;</div><div class="line">   &#125;)();</div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> ProxyMode(<span class="string">"aaa"</span>);</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> ProxyMode(<span class="string">"bbb"</span>);</div><div class="line"><span class="built_in">console</span>.log(a===b);<span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建div</span></div><div class="line"><span class="keyword">var</span> createWindow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">	div.innerHTML = <span class="string">"我是弹窗内容"</span>;</div><div class="line">	div.style.display = <span class="string">'none'</span>;</div><div class="line">	<span class="built_in">document</span>.body.appendChild(div);</div><div class="line">	<span class="keyword">return</span> div;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 创建iframe</span></div><div class="line"><span class="keyword">var</span> createIframe = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</div><div class="line">	<span class="built_in">document</span>.body.appendChild(iframe);</div><div class="line">	<span class="keyword">return</span> iframe;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 获取实例的封装代码</span></div><div class="line"><span class="keyword">var</span> getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> result;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> result || (result = fn.call(<span class="keyword">this</span>,<span class="built_in">arguments</span>));</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 测试创建div</span></div><div class="line"><span class="keyword">var</span> createSingleDiv = getInstance(createWindow);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> win = createSingleDiv();</div><div class="line">	win.style.display = <span class="string">"block"</span>;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 测试创建iframe</span></div><div class="line"><span class="keyword">var</span> createSingleIframe = getInstance(createIframe);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> win = createSingleIframe();</div><div class="line">	win.innerHTML = <span class="string">"rawraw hello"</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h2><blockquote>
<p>单体模式是以对象字面量的方式来创建单体模式一个用来划分命名空间并将一批属性和方法组织在一起的对象，如果它可以被实例化，那么它只能被实例化一次。<br>以对象字面量的方式来创建单体模式。</p>
<blockquote>
<p>适用场景：弹窗</p>
</blockquote>
</blockquote>
<h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><h1 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> singleMode = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> privateNum = <span class="number">112</span>;<span class="comment">// 创建私有变量</span></div><div class="line">    <span class="comment">// 创建私有函数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateFunc</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// 实现自己的业务逻辑代码</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 返回一个对象包含公有方法和属性</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">publicMethod1</span>: publicMethod1,</div><div class="line">        <span class="attr">publicMethod2</span>: publicMethod1</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>模块模式使用了一个返回对象的匿名函数。在这个匿名函数内部，先定义了私有变量和函数，供内部函数使用，然后将一个对象字面量作为函数的值返回，返回的对象字面量中只包含可以公开的属性和方法。这样的话，可以提供外部使用该方法；由于该返回对象中的公有方法是在匿名函数内部定义的，因此它可以访问内部的私有变量和函数。</p>
<h2 id="增强的模块模式"><a href="#增强的模块模式" class="headerlink" title="增强的模块模式"></a>增强的模块模式</h2><p>适合那些单列必须是某种类型的实例，同时还必须添加某些属性或方法对其加以增强的情况。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = <span class="string">"rawraw"</span>;</div><div class="line">&#125;</div><div class="line">CustomType.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> application = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> privateA = <span class="string">"aa"</span>;<span class="comment">// 定义私有</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;&#125;<span class="comment">// 定义私有函数</span></div><div class="line">	<span class="keyword">var</span> object = <span class="keyword">new</span> CustomType();<span class="comment">// 实例化一个对象后，返回该实例，然后为该实例增加一些公有属性和方法</span></div><div class="line">	object.A = <span class="string">"cc"</span>;<span class="comment">// 添加公有属性</span></div><div class="line">	<span class="comment">// 添加公有方法</span></div><div class="line">	object.B = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> privateA;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> object;<span class="comment">// 返回该对象</span></div><div class="line">&#125;)();</div><div class="line"><span class="built_in">console</span>.log(application);</div><div class="line"><span class="built_in">console</span>.log(application.A);<span class="comment">// cc</span></div><div class="line"><span class="built_in">console</span>.log(application.B()); <span class="comment">// aa</span></div><div class="line"><span class="built_in">console</span>.log(application.name); <span class="comment">// rawraw</span></div><div class="line"><span class="built_in">console</span>.log(application.getName());<span class="comment">// rawraw</span></div></pre></td></tr></table></figure></p>
<h2 id="理解-2"><a href="#理解-2" class="headerlink" title="理解"></a>理解</h2><blockquote>
<p>模块模式的思路是为单体模式添加私有变量和私有方法能够减少全局变量的使用；</p>
<blockquote>
<p>适用场景：必须创建一个对象并以某些数据进行初始化，同时还要公开一些能够访问这些私有数据的方法</p>
</blockquote>
</blockquote>
<h2 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h2><h2 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h2><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">## 理解</div><div class="line">&gt;</div><div class="line">&gt;&gt; 适用场景：图片预加载</div><div class="line"></div><div class="line">## 案例</div><div class="line">```js</div><div class="line">// 不使用代理的预加载图片函数如下</div><div class="line">var myImage = (function()&#123;</div><div class="line">    var imgNode = document.createElement(&quot;img&quot;);</div><div class="line">    document.body.appendChild(imgNode);</div><div class="line">    var img = new Image();</div><div class="line">    img.onload = function()&#123;</div><div class="line">        imgNode.src = this.src;</div><div class="line">    &#125;;</div><div class="line">    return &#123;</div><div class="line">        setSrc: function(src) &#123;</div><div class="line">            imgNode.src = &quot;http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif&quot;;</div><div class="line">            img.src = src;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line">// 调用方式</div><div class="line">myImage.setSrc(&quot;https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png&quot;);</div><div class="line">var myImage = (function()&#123;</div><div class="line">    var imgNode = document.createElement(&quot;img&quot;);</div><div class="line">    document.body.appendChild(imgNode);</div><div class="line">    return &#123;</div><div class="line">        setSrc: function(src) &#123;</div><div class="line">            imgNode.src = src;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line">// 代理模式</div><div class="line">var ProxyImage = (function()&#123;</div><div class="line">    var img = new Image();</div><div class="line">    img.onload = function()&#123;</div><div class="line">        myImage.setSrc(this.src);</div><div class="line">    &#125;;</div><div class="line">    return &#123;</div><div class="line">        setSrc: function(src) &#123;</div><div class="line">                         myImage.setSrc(&quot;http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif&quot;);</div><div class="line">        img.src = src;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line">// 调用方式</div><div class="line">ProxyImage.setSrc(&quot;https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png&quot;);</div></pre></td></tr></table></figure>
<h2 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h2><p>1.代理对象可以代替本体被实例化，并使其可以被远程访问；<br>2.它还可以把本体实例化推迟到真正需要的时候；对于实例化比较费时的本体对象，或者因为尺寸比较大以至于不用时不适于保存在内存中的本体，我们可以推迟实例化该对象；</p>
<h2 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h2><h1 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">## 理解</div><div class="line">## 优点</div><div class="line">## 缺点</div><div class="line"># 命令模式</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">## 理解</div><div class="line">## 优点</div><div class="line">## 缺点</div><div class="line"># 模板方法模式</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">## 理解</div><div class="line">## 优点</div><div class="line">## 缺点</div><div class="line"># 策略模式</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">## 理解</div><div class="line">## 优点</div><div class="line">## 缺点</div><div class="line"># 发布-订阅模式(观察者模式)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">## 理解</div><div class="line">## 优点</div><div class="line">## 缺点</div><div class="line"># 中介者模式</div></pre></td></tr></table></figure>
<p>```</p>
<h2 id="理解-3"><a href="#理解-3" class="headerlink" title="理解"></a>理解</h2><h2 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h2><h2 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h2><p><a href="http://www.cnblogs.com/tugenhua0707/p/5198407.html" target="_blank" rel="external">http://www.cnblogs.com/tugenhua0707/p/5198407.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哎，最不想整理的就是这一块了&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0040.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://rawraw.info/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="JavaScript" scheme="http://rawraw.info/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Front-end总结</title>
    <link href="http://rawraw.info/2017-05-25-front-end.html"/>
    <id>http://rawraw.info/2017-05-25-front-end.html</id>
    <published>2017-05-25T08:31:48.000Z</published>
    <updated>2017-05-25T08:38:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端学习流程整理、我的小计划。然后可能就是大神了吧，哈哈哈哈哈哈哈哈哈哈<del>~</del></p>
<p><div align="center"><br><img src="/images/bg/0041.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<p>要不要画个图 我先纠结几天吧、</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端学习流程整理、我的小计划。然后可能就是大神了吧，哈哈哈哈哈哈哈哈哈哈&lt;del&gt;~&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0041.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="小结" scheme="http://rawraw.info/categories/%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="summary" scheme="http://rawraw.info/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>navicat for mysql安装问题</title>
    <link href="http://rawraw.info/2017-05-16-navicat.html"/>
    <id>http://rawraw.info/2017-05-16-navicat.html</id>
    <published>2017-05-16T06:57:22.000Z</published>
    <updated>2017-05-16T07:23:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>navicat for mysql安装问题小集合</p>
<p><div align="center"><br><img src="/images/bg/0024.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="1045"><a href="#1045" class="headerlink" title="1045"></a>1045</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C:\xampp\MySQL\bin mysql -u root mysql  </div><div class="line">mysql&gt; UPDATE user SET Password=PASSWORD(&apos;newpassword&apos;) where USER=&apos;root&apos;;</div><div class="line">mysql&gt; FLUSH PRIVILEGES;</div><div class="line">mysql&gt; quit</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;navicat for mysql安装问题小集合&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0024.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://rawraw.info/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>xampp配置虚拟主机</title>
    <link href="http://rawraw.info/2017-05-16-xampp.html"/>
    <id>http://rawraw.info/2017-05-16-xampp.html</id>
    <published>2017-05-16T06:56:42.000Z</published>
    <updated>2017-05-16T07:21:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>xampp配置虚拟主机</p>
<p><div align="center"><br><img src="/images/bg/0019.jpeg" alt="“封面”"><br></div><br><a id="more"></a><br>首先，xampp要可以基本运行起来</p>
<h1 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h1><p><div align="center"><br><img src="/images/code/20170516001.png" alt="“路径”"><br></div><br>以管理员身份运行hosts,新增<code>127.0.0.1 test.com</code></p>
<h1 id="xampp配置"><a href="#xampp配置" class="headerlink" title="xampp配置"></a>xampp配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line">    ServerAdmin webmaster@dummy-host2.example.com</div><div class="line">    DocumentRoot &quot;E:/test&quot;  ## 文件根目录</div><div class="line">    ServerName  test.com    ## 虚拟域名</div><div class="line">    &lt;Directory E:/test&gt;     ## 文件根目录</div><div class="line">        Options -Indexes</div><div class="line">        AllowOverride ALL</div><div class="line">        DirectoryIndex index.php index.html</div><div class="line">        Require all granted</div><div class="line">    &lt;/Directory&gt;</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;xampp配置虚拟主机&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0019.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="xampp" scheme="http://rawraw.info/tags/xampp/"/>
    
  </entry>
  
  <entry>
    <title>http协议</title>
    <link href="http://rawraw.info/2017-05-10-http.html"/>
    <id>http://rawraw.info/2017-05-10-http.html</id>
    <published>2017-05-10T01:37:26.000Z</published>
    <updated>2017-05-17T09:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个页面的呈现，经历了怎样的对白、</p>
<p><div align="center"><br><img src="/images/bg/0026.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="在浏览器输入url地址"><a href="#在浏览器输入url地址" class="headerlink" title="在浏览器输入url地址"></a>在浏览器输入url地址</h1><h1 id="浏览器查找域名的-IP-地址"><a href="#浏览器查找域名的-IP-地址" class="headerlink" title="浏览器查找域名的 IP 地址　"></a>浏览器查找域名的 IP 地址　</h1><p><a href="http://mp.weixin.qq.com/s/Z-vKtayFWPZ-E-mXAgVNsQ" target="_blank" rel="external">http://mp.weixin.qq.com/s/Z-vKtayFWPZ-E-mXAgVNsQ</a><br><a href="http://mp.weixin.qq.com/s/monpEQJWf1MpBYManDY12A" target="_blank" rel="external">http://mp.weixin.qq.com/s/monpEQJWf1MpBYManDY12A</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个页面的呈现，经历了怎样的对白、&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0026.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://rawraw.info/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="http" scheme="http://rawraw.info/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式整理</title>
    <link href="http://rawraw.info/2017-05-09-regexp.html"/>
    <id>http://rawraw.info/2017-05-09-regexp.html</id>
    <published>2017-05-09T03:22:42.000Z</published>
    <updated>2017-05-09T03:31:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>特别简单的就不记下来了，这么简单都还要来翻，还撸什么码/</p>
<p><div align="center"><br><img src="/images/bg/0028.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="汉字-u4e00-u9fa5-0"><a href="#汉字-u4e00-u9fa5-0" class="headerlink" title="汉字: ^[\u4e00-\u9fa5]{0,}$"></a>汉字: <code>^[\u4e00-\u9fa5]{0,}$</code></h1><h1 id="email-w-w-w-w-w-w"><a href="#email-w-w-w-w-w-w" class="headerlink" title="email: ^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$"></a>email: <code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;特别简单的就不记下来了，这么简单都还要来翻，还撸什么码/&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0028.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="积累" scheme="http://rawraw.info/categories/%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="summary" scheme="http://rawraw.info/tags/summary/"/>
    
      <category term="正则" scheme="http://rawraw.info/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
</feed>
