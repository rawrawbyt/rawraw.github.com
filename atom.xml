<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rawraw</title>
  <subtitle>Change not delete ！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rawraw.info/"/>
  <updated>2017-06-21T03:04:23.460Z</updated>
  <id>http://rawraw.info/</id>
  
  <author>
    <name>rawraw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>鹅厂小事件</title>
    <link href="http://rawraw.info/2017-06-21-tencent.html"/>
    <id>http://rawraw.info/2017-06-21-tencent.html</id>
    <published>2017-06-21T02:58:49.000Z</published>
    <updated>2017-06-21T03:04:23.460Z</updated>
    
    <content type="html"><![CDATA[<p>鹅厂啊鹅厂<br><a id="more"></a></p>
<h1 id="鹅厂企业邮箱"><a href="#鹅厂企业邮箱" class="headerlink" title="鹅厂企业邮箱"></a>鹅厂企业邮箱</h1><p>鹅厂企业邮箱pop设置：pop.exmail.qq.com</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鹅厂啊鹅厂&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://rawraw.info/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="widen" scheme="http://rawraw.info/tags/widen/"/>
    
  </entry>
  
  <entry>
    <title>Javascript模块规范:CommonJS和AMD</title>
    <link href="http://rawraw.info/2017-06-20-modulerule.html"/>
    <id>http://rawraw.info/2017-06-20-modulerule.html</id>
    <published>2017-06-20T08:49:47.000Z</published>
    <updated>2017-06-20T09:10:54.259Z</updated>
    
    <content type="html"><![CDATA[<p>目前，通行的Javascript模块规范有两种：CommonJS和AMD。</p>
<p><div align="center"><br><img src="/images/bg/0010.jpg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><blockquote>
<p>在浏览器环境下，没有模块也不是特别大的问题，毕竟网页程序的复杂性有限；但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。node.js的模块系统，就是参照CommonJS规范实现的。在CommonJS中，有一个全局性方法require()，用于加载模块。</p>
</blockquote>
<p>假定有一个数学模块math.js，就可以像下面这样加载。<br><figure class="highlight js"><figcaption><span>[math.js]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>);</div><div class="line">math.add(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 5 ,调用模块提供的方法</span></div></pre></td></tr></table></figure></p>
<p>CommonJS规范不适用于浏览器环境。第二行math.add(2, 3)，在第一行require(‘math’)之后运行，因此必须等math.js加载完成。浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是AMD规范诞生的背景。</p>
<p>##　AMD规范</p>
<blockquote>
<p>全称：Asynchronous Module Definition（异步模块定义）<br>它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>
</blockquote>
<p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：<br><code>require([module], callback);</code><br>上述的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　<span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>) </span>&#123;</div><div class="line">　　　　math.add(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line">　　&#125;);</div></pre></td></tr></table></figure></p>
<p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前，通行的Javascript模块规范有两种：CommonJS和AMD。&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0010.jpg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://rawraw.info/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="JavaScript" scheme="http://rawraw.info/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>rawraw的github</title>
    <link href="http://rawraw.info/2017-06-20-github.html"/>
    <id>http://rawraw.info/2017-06-20-github.html</id>
    <published>2017-06-20T02:18:03.000Z</published>
    <updated>2017-06-20T02:35:28.095Z</updated>
    
    <content type="html"><![CDATA[<p>rawraw的github项目的快速链接</p>
<p><div align="center"><br><img src="/images/bg/0044.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="bundler"><a href="#bundler" class="headerlink" title="bundler"></a>bundler</h1><ul>
<li><a href="http://www.rawraw.info/browserify-learn/" target="_blank" rel="external">browserify</a></li>
<li><a href="http://www.rawraw.info/webpack-learn/" target="_blank" rel="external">webpack</a></li>
<li><a href="http://www.rawraw.info/RequireJS-learn/" target="_blank" rel="external">RequireJS/AMD</a></li>
</ul>
<h1 id="taskrunner"><a href="#taskrunner" class="headerlink" title="taskrunner"></a>taskrunner</h1><ul>
<li><a href="http://www.rawraw.info/Grunt-learn/" target="_blank" rel="external">Grunt</a></li>
<li><a href="http://www.rawraw.info/Gulp-learn/" target="_blank" rel="external">Gulp</a></li>
</ul>
<p><a href="https://segmentfault.com/a/1190000005706707" target="_blank" rel="external">git常用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rawraw的github项目的快速链接&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0044.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="链接" scheme="http://rawraw.info/categories/%E9%93%BE%E6%8E%A5/"/>
    
    
      <category term="链接" scheme="http://rawraw.info/tags/%E9%93%BE%E6%8E%A5/"/>
    
      <category term="github" scheme="http://rawraw.info/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>HTML5/JavaScript/CSS书写规范</title>
    <link href="http://rawraw.info/2017-06-14-norm.html"/>
    <id>http://rawraw.info/2017-06-14-norm.html</id>
    <published>2017-06-14T06:46:21.000Z</published>
    <updated>2017-06-19T07:51:28.029Z</updated>
    
    <content type="html"><![CDATA[<p>作为强迫症，就是特别喜欢介个样子//</p>
<p><div align="center"><br><img src="/images/bg/0047.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h1 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5 standardization<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">//type属性：省略</div></pre></td></tr></table></figure>
<h1 id="区分浏览器"><a href="#区分浏览器" class="headerlink" title="区分浏览器"></a>区分浏览器</h1><p>no-js标签是需要与Modernizr等类库配合使用的<br><code>&lt;script src=&quot;js/libs/modernizr-2.5.0.min.js&quot;&gt;&lt;/script&gt;</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if lt IE 7]&gt; &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="zh"&gt; &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 7]&gt;    &lt;html class="no-js lt-ie9 lt-ie8" lang="zh"&gt; &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if IE 8]&gt;    &lt;html class="no-js lt-ie9" lang="zh"&gt; &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"no-js"</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span> <span class="comment">&lt;!--&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>避免IE6条件注释引起的高版本IE文件阻塞问题</li>
<li>与Modernizr等特征检测类库使用相同的class，更具备通用性</li>
<li>优于使用CSS Hack</li>
</ul>
<h2 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a>嵌套规则</h2><ul>
<li>块元素可以包含内联元素或某些块元素，但内联元素却不能包含块元素，它只能包含其它的内联元素；</li>
<li><p>里面不能放块级元素；</p></li>
<li>块级元素与块级元素并列、内嵌元素与内嵌元素并列；</li>
</ul>
<h2 id="文档内容"><a href="#文档内容" class="headerlink" title="文档内容"></a>文档内容</h2><ul>
<li>自定义属性：<code>data-*</code></li>
<li>不要使用内联样式</li>
<li>不要使用<em>和<strong>,用css来控制。不要使用<i>和<b>，HTML5不赞成使用</b></i></strong></em></li>
</ul>
<h2 id="实体字符引用"><a href="#实体字符引用" class="headerlink" title="实体字符引用"></a>实体字符引用</h2><table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">实体名</th>
<th style="text-align:center">实体数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">“</td>
<td style="text-align:center"><code>&amp;quot;</code></td>
<td style="text-align:center"><code>&amp;#34;</code></td>
</tr>
<tr>
<td style="text-align:center">‘</td>
<td style="text-align:center"><code>&amp;apos;(IE不支持)</code></td>
<td style="text-align:center"><code>&amp;#39;</code></td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center"><code>&amp;amp;</code></td>
<td style="text-align:center"><code>&amp;#38;</code></td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center"><code>&amp;gt;</code></td>
<td style="text-align:center"><code>&amp;#62;</code></td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center"><code>&amp;lt;</code></td>
<td style="text-align:center"><code>&amp;#60;</code></td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center"><code>&amp;nbsp;</code></td>
<td style="text-align:center"><code>&amp;#160;</code></td>
</tr>
<tr>
<td style="text-align:center">&emsp;</td>
<td style="text-align:center"><code>&amp;emsp;</code></td>
<td style="text-align:center"><code>&amp;#12288;</code></td>
</tr>
<tr>
<td style="text-align:center">￥&yen;</td>
<td style="text-align:center"><code>&amp;yen;</code></td>
<td style="text-align:center"><code>&amp;#165;</code></td>
</tr>
<tr>
<td style="text-align:center">&brvbar;</td>
<td style="text-align:center"><code>&amp;brvbar;</code></td>
<td style="text-align:center"><code>&amp;#39;</code></td>
</tr>
<tr>
<td style="text-align:center">&copy;</td>
<td style="text-align:center"><code>&amp;copy;</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">&reg;</td>
<td style="text-align:center"><code>&amp;reg;</code></td>
<td style="text-align:center"><code>&amp;#169;</code></td>
</tr>
<tr>
<td style="text-align:center">&trade;</td>
<td style="text-align:center"><code>&amp;trade;</code></td>
<td style="text-align:center"><code>&amp;#8428;</code></td>
</tr>
<tr>
<td style="text-align:center">&middot;</td>
<td style="text-align:center"><code>&amp;middot;</code></td>
<td style="text-align:center"><code>&amp;#183;</code></td>
</tr>
<tr>
<td style="text-align:center">&laquo;</td>
<td style="text-align:center"><code>&amp;laquo;</code></td>
<td style="text-align:center"><code>&amp;#171;</code></td>
</tr>
<tr>
<td style="text-align:center">&raquo;</td>
<td style="text-align:center"><code>&amp;raquo;</code></td>
<td style="text-align:center"><code>&amp;#187;</code></td>
</tr>
<tr>
<td style="text-align:center">&deg;</td>
<td style="text-align:center"><code>&amp;deg;</code></td>
<td style="text-align:center"><code>&amp;#176;</code></td>
</tr>
<tr>
<td style="text-align:center">&times;</td>
<td style="text-align:center"><code>&amp;times;</code></td>
<td style="text-align:center"><code>&amp;#215;</code></td>
</tr>
<tr>
<td style="text-align:center">&divide;</td>
<td style="text-align:center"><code>&amp;divide;</code></td>
<td style="text-align:center"><code>&amp;#247;</code></td>
</tr>
<tr>
<td style="text-align:center">&permil;</td>
<td style="text-align:center"><code>&amp;permil;</code></td>
<td style="text-align:center"><code>&amp;#8240;</code></td>
</tr>
</tbody>
</table>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul>
<li>给图片添加width和height，提升页面加载速度</li>
<li>给所有img添加alt属性</li>
<li>不要使用或尽量少用gif文件</li>
</ul>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="引用结构"><a href="#引用结构" class="headerlink" title="引用结构"></a>引用结构</h2><p>按照顺序引入<br>CSS 一律写在 CSS 文件中，原则上不写内联样式，不直接为标签添加样式（reset 除外）。</p>
<ul>
<li>基础框架（reset / grid …）</li>
<li>通用模块（theme/ common…）</li>
<li>页面样式（page…）</li>
</ul>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul>
<li>CSS对大小写敏感</li>
<li>不采用驼峰式命名，不用中文拼音</li>
<li>不允许使用具体的样式名称命名，也不应包含颜色、位置等与现实效果相关的信息。</li>
<li>加上适当的命名空间（前缀），以避免命名冲突。命名空间不使用单个字母，以免与通用样式冲突。</li>
</ul>
<h3 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h3><p>CSS 文件命名由小写字母、下划线（_）组成。</p>
<h3 id="选择器命名"><a href="#选择器命名" class="headerlink" title="选择器命名"></a>选择器命名</h3><p>CSS 文件命名由小写字母、中划线（-）组成。<br>|布局（grid） .g-|模块（module） .m-|元件（unit）|功能（function）|状态 .z-|皮肤（skin） .s-|JS选择器 .j-|</p>
<h2 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h2><ul>
<li><code>;</code>分行书写</li>
<li>属性值为 0 时，单位可以省略。</li>
<li>属性值为小数时，小数点之前的 0 不可以省略。</li>
<li>省略 url 中的引号，其他需要引号的地方使用单引号。</li>
</ul>
<h2 id="书写顺序"><a href="#书写顺序" class="headerlink" title="书写顺序"></a>书写顺序</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>| 显示属性 | display, visibility, position, float, clear, list-style, top 等 |<br>| 自身属性 | width, height, margin, padding, border, overflow 等 |<br>| 文本及修饰属性 | font, text-align, text-decoration, vertical-align, white-space, color, background 等 |<br>| CSS3 属性 | border-radius, box-shadow, gradients, transforms, animations 等 |</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>a:link -&gt; a:visited -&gt; a:hover -&gt; a:active</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="合并选择器"><a href="#合并选择器" class="headerlink" title="合并选择器"></a>合并选择器</h3><h3 id="属性值缩写"><a href="#属性值缩写" class="headerlink" title="属性值缩写"></a>属性值缩写</h3><ul>
<li>margin</li>
<li>padding</li>
<li>border</li>
<li>background</li>
<li>font</li>
<li>color</li>
<li>list-style</li>
</ul>
<h2 id="避免耗性能的属性"><a href="#避免耗性能的属性" class="headerlink" title="避免耗性能的属性"></a>避免耗性能的属性</h2><ul>
<li><code>width: expression(this.width&gt;100?&#39;100px&#39;:&#39;auto&#39;);</code></li>
<li><code>filter: alpha(opacity=50);</code></li>
</ul>
<h3 id="图片合并（sprite）"><a href="#图片合并（sprite）" class="headerlink" title="图片合并（sprite）"></a>图片合并（sprite）</h3><h3 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h3><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用===/!=="></a>使用<code>===</code>/<code>!==</code></h2><p><code>==</code>和<code>!=</code>不判断类型</p>
<h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><p>在判断函数是否为空的情况下，使用<code>==</code>或<code>!=</code>是可以的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果foo没有被初始化，它默认的值是undefined而不是null。当然underfined更不会等于null了。</span></div><div class="line"><span class="comment">//因此这种情况应该使用==和!=。</span></div><div class="line"><span class="keyword">if</span> (foo == <span class="literal">null</span>) &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="DELETE在数组中"><a href="#DELETE在数组中" class="headerlink" title="DELETE在数组中"></a><code>DELETE</code>在数组中</h2><p>数组可以被<code>DELETE</code>，但是会留下<code>undefined</code>元素。<br>可以用shift( )/pop( )/splice(index,num)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span> ];</div><div class="line"><span class="keyword">delete</span> myArray[<span class="number">2</span>]; </div><div class="line"><span class="comment">// Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']</span></div><div class="line"><span class="built_in">console</span>.log(myArray[<span class="number">2</span>]); <span class="comment">// 'undefined'</span></div></pre></td></tr></table></figure></p>
<h2 id="for-in-的循环在每次操作前需要进行过滤判断"><a href="#for-in-的循环在每次操作前需要进行过滤判断" class="headerlink" title="for...in..的循环在每次操作前需要进行过滤判断"></a><code>for...in..</code>的循环在每次操作前需要进行过滤判断</h2><p>“for … in”这种循环允许开发人员按照属性的名字遍历对象。不幸的是，这个属性的集合包括了对象自身和对象继承的对象的所有属性。如果程序不考虑这点就会出现错误。都应该包括一个if判断来过滤你需要的属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (name <span class="keyword">in</span> object) &#123;</div><div class="line">    <span class="keyword">if</span> (object.hasOwnProperty(name)) &#123;</div><div class="line">        doSomething(name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="NaN不要出现在比较中"><a href="#NaN不要出现在比较中" class="headerlink" title="NaN不要出现在比较中"></a><code>NaN</code>不要出现在比较中</h2><p>NAN不等于包括自身在内的任何值。因此与NAN作比较是得不到你需要的结果的，但是这种错误有可能会出现。<br>事实上，判断值是否等于NAN最好的方法就是和它自己作比较即NAN!==NAN，因为正常的变量都是等于自身的，如果不等于自身成立，就说明这个值是NAN。</p>
<h2 id="保证函数调用时传入的参数都被使用"><a href="#保证函数调用时传入的参数都被使用" class="headerlink" title="保证函数调用时传入的参数都被使用"></a>保证函数调用时传入的参数都被使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    compute(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line">doSomething(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    print(a + <span class="string">' '</span> + b);</div><div class="line">&#125;</div><div class="line">say(<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'!'</span>);</div></pre></td></tr></table></figure>
<h2 id="选择器得到的结果一定要用LENGTH判断"><a href="#选择器得到的结果一定要用LENGTH判断" class="headerlink" title="选择器得到的结果一定要用LENGTH判断"></a>选择器得到的结果一定要用LENGTH判断</h2><p>无论是否找到该对象，选择器总是返回一个对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($(<span class="string">'.test'</span>)) &#123;</div><div class="line">       <span class="comment">// ...</span></div><div class="line">     &#125;</div><div class="line"><span class="keyword">if</span> ($(<span class="string">'.test'</span>).length &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="comment">//  ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="用逻辑短路防止出现空的错误"><a href="#用逻辑短路防止出现空的错误" class="headerlink" title="用逻辑短路防止出现空的错误"></a>用逻辑短路防止出现空的错误</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; str.length == <span class="number">0</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'String is empty'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (str != <span class="literal">undefined</span> &amp;&amp; str.length == <span class="number">0</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'String is empty'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (str == <span class="literal">null</span> || str.length &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'String is not empty'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (str == <span class="literal">undefined</span> || str.length &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'String is not empty'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h2><ul>
<li>用<code>null</code>,不要用<code>undefined</code>（尚未创建）赋值给变量。</li>
<li><code>var i = 0;i = i++;</code></li>
<li>parseInt函数有两个版本的，一个是只有一个参数的，而另一个是需要两个参数的。然而，旧版的浏览器不支持一个参数的parseInt方法。<br><code>parseInt(&quot;010&quot;, 10);</code></li>
</ul>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul>
<li><code>var input = $( &#39;form input[type=radio]&#39; );</code>代替<code>var input = $( &#39;form input:radio&#39; );</code></li>
<li><code>var $productIds = $(&#39;#products&#39;).find(&#39;div.id&#39;);</code>代替<code>var $productIds = $(&#39;#products div.id&#39;);</code></li>
<li>选择结果应该被保存，<code>var paragraph = $(&#39;p&#39;);paragraph.hide();paragraph.show();</code></li>
<li>尽量不要通配选择器<em><code>$( &#39;.buttons&#39; ).children();</code>代替`$( ‘.buttons &gt; </em>‘ ); `</li>
<li>使用<code>===</code>/<code>!==</code>，<code>==</code>和<code>!=</code>不判断类型</li>
</ul>
<h2 id="约定规范"><a href="#约定规范" class="headerlink" title="约定规范"></a>约定规范</h2><ul>
<li>每一条声明须要由“;”结尾</li>
<li>注释不应该写在每一行的最后面；一行代码不要太长（不超过80）；多分行分行</li>
<li>文件后面应该包含一个空行（这条规则会使得在利用一些工具，例如Git的时候配合的更好）</li>
<li>声明STRING类型的变量是需要用单引号</li>
<li>源代码文件应该有足够的注释（默认15%）</li>
<li>FUNCTIONS不应该有太多行（阈值：300），难以理解以及维护。</li>
<li>函数不应该有太多的参数（临界值为7）</li>
<li>一个表达式不应该有超过三个的操作符，以增加表达式的可读性。</li>
<li>循环不应该包括多余一个的BREAK或者CONTINUE语句，否则重构</li>
<li>结尾的逗号不应该被使用<code>var settings = {&#39;foo&#39;: oof,&#39;bar&#39;: rab};</code></li>
<li><code>ARGUMENTS.CALLER</code>和<code>ARGUMENTS.CALLEE</code>在ECMAScript5中，这两个函数在strict模式下都被禁止使用。在最新的Javascript版本中不建议被使用。</li>
<li>不要省略大括号（）if，作为范围控制</li>
<li><code>SWITCH</code>的每个条件结尾都要有<code>BREAK</code></li>
<li>发布版本中不要有<code>alert()</code>,<code>console</code>,给攻击者泄露敏感信息</li>
<li><code>//TODO</code>，<code>// FIXME</code>只在 开发过程中。</li>
<li>开发人员不能注释代码，因为会影响代码可读性。不再使用的代码就删除。</li>
<li><code>new</code>关键字应该和构造函数一起使用</li>
<li>不要使用<code>ARRAY</code>和<code>OBJECT</code>的构造方法。超过一个参数，会新建多个array.</li>
<li>不要重载内置对象</li>
<li>及时释放无用的储存</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为强迫症，就是特别喜欢介个样子//&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0047.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="小结" scheme="http://rawraw.info/categories/%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="summary" scheme="http://rawraw.info/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>API大全整理/from github</title>
    <link href="http://rawraw.info/2017-06-13-api.html"/>
    <id>http://rawraw.info/2017-06-13-api.html</id>
    <published>2017-06-13T09:47:54.000Z</published>
    <updated>2017-06-13T09:56:45.586Z</updated>
    
    <content type="html"><![CDATA[<p>偶然发现的github上的API，蛮好用的吼、</p>
<p><div align="center"><br><img src="/images/bg/0038.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="emoji表情包大全"><a href="#emoji表情包大全" class="headerlink" title="emoji表情包大全"></a>emoji表情包大全</h1><p><code>https://api.github.com/emojis</code><br><code>GET</code><br>返回数据格式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"+1"</span>: <span class="string">"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png?v7"</span>,</div><div class="line">  <span class="string">"-1"</span>: <span class="string">"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44e.png?v7"</span>,</div><div class="line">  <span class="string">"100"</span>: <span class="string">"https://assets-cdn.github.com/images/icons/emoji/unicode/1f4af.png?v7"</span>,</div><div class="line">  <span class="string">"1234"</span>: <span class="string">"https://assets-cdn.github.com/images/icons/emoji/unicode/1f522.png?v7"</span>,</div><div class="line">  <span class="comment">//...</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h1 id="markdown编辑器"><a href="#markdown编辑器" class="headerlink" title="markdown编辑器"></a>markdown编辑器</h1><p><code>https://api.github.com/markdown</code><br><code>POST</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data = </div><div class="line">&#123;   <span class="string">"text"</span>:<span class="string">"#test"</span>,</div><div class="line">    <span class="string">"mode"</span>: <span class="string">"gfm"</span>,</div><div class="line">    <span class="string">"context"</span>: <span class="string">"github/gollum"</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>返回数据：html</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然发现的github上的API，蛮好用的吼、&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0038.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="干货" scheme="http://rawraw.info/categories/%E5%B9%B2%E8%B4%A7/"/>
    
    
      <category term="summary" scheme="http://rawraw.info/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript要仔细学之一//apply( )和call( )的区别</title>
    <link href="http://rawraw.info/2017-06-12-js01.html"/>
    <id>http://rawraw.info/2017-06-12-js01.html</id>
    <published>2017-06-12T08:18:56.000Z</published>
    <updated>2017-06-12T08:33:34.612Z</updated>
    
    <content type="html"><![CDATA[<p><code>call</code>和<code>apply</code>可以改变<code>this</code>指针,即改变函数的作用域。<br><a id="more"></a></p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p><code>call</code>和<code>apply</code>方法的作用相同，就是参数不同。<br><code>call</code>和<code>apply</code>的第一个参数都是一样的，但是后面参数不同，<code>call</code>从第二个参数开始后面有许多参数，<code>apply</code>第二个参数必须是数组。<br><code>call([thisObj[,arg1[, arg2[,   [,.argN]]]]])</code><br><code>apply([thisObj[,argArray]])</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;call&lt;/code&gt;和&lt;code&gt;apply&lt;/code&gt;可以改变&lt;code&gt;this&lt;/code&gt;指针,即改变函数的作用域。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript要仔细学" scheme="http://rawraw.info/categories/JavaScript%E8%A6%81%E4%BB%94%E7%BB%86%E5%AD%A6/"/>
    
    
      <category term="JavaScript" scheme="http://rawraw.info/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>模块打包-bundler：browserify、webpack、RequireJS/AMD</title>
    <link href="http://rawraw.info/2017-05-26-bundler.html"/>
    <id>http://rawraw.info/2017-05-26-bundler.html</id>
    <published>2017-05-26T03:00:28.000Z</published>
    <updated>2017-06-21T03:04:54.748Z</updated>
    
    <content type="html"><![CDATA[<p>目前比较完善的模块打包：browserify和webpack。webpack在browserify之后出现。</p>
<p><div align="center"><br><img src="/images/bg/0034.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="browserify"><a href="#browserify" class="headerlink" title="browserify"></a>browserify</h1><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h1 id="RequireJS-AMD"><a href="#RequireJS-AMD" class="headerlink" title="RequireJS/AMD"></a>RequireJS/AMD</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前比较完善的模块打包：browserify和webpack。webpack在browserify之后出现。&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0034.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://rawraw.info/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="widen" scheme="http://rawraw.info/tags/widen/"/>
    
  </entry>
  
  <entry>
    <title>任务流工具-taskrunner：Grunt、Gulp</title>
    <link href="http://rawraw.info/2017-05-26-task-runner.html"/>
    <id>http://rawraw.info/2017-05-26-task-runner.html</id>
    <published>2017-05-26T02:48:57.000Z</published>
    <updated>2017-06-21T03:04:54.898Z</updated>
    
    <content type="html"><![CDATA[<p>目前比较完善的任务流工具：Grunt和Gulp。Gulp在Grunt之后出现，有Grunt的优点，同时增加了新特性。</p>
<p><div align="center"><br><img src="/images/bg/0036.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm install grunt-cli -g</code></p>
<h1 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p><code>npm install gulp-cli -g</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前比较完善的任务流工具：Grunt和Gulp。Gulp在Grunt之后出现，有Grunt的优点，同时增加了新特性。&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0036.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://rawraw.info/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="widen" scheme="http://rawraw.info/tags/widen/"/>
    
  </entry>
  
  <entry>
    <title>design patterns - JavaScript设计模式</title>
    <link href="http://rawraw.info/2017-05-25-design-patterns.html"/>
    <id>http://rawraw.info/2017-05-25-design-patterns.html</id>
    <published>2017-05-25T09:16:06.000Z</published>
    <updated>2017-06-09T08:08:22.671Z</updated>
    
    <content type="html"><![CDATA[<p>哎，最不想整理的就是这一块了</p>
<p><div align="center"><br><img src="/images/bg/0040.jpeg" alt="“封面”"><br></div><br><a id="more"></a><br>最初在设计模式 一书中，许多设计模式都鼓励使用松散耦合。在更改一个代码片段时，就会发生问题，系统其他部分 —— 曾认为完全不相关的部分中也有可能出现级联破坏。该问题在于紧密耦合 。系统某个部分中的函数和类严重依赖于系统的其他部分中函数和类的行为和结构。您需要一组模式，使这些类能够相互通信，但不希望将它们紧密绑定在一起，以避免出现联锁。</p>
<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BuyHero</span>(<span class="params">name,type,price</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">	obj.name = name;</div><div class="line">	obj.age = type;</div><div class="line">	obj.price = price;</div><div class="line">	obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> h1 = <span class="keyword">new</span> BuyHero(<span class="string">'Teemo'</span>,<span class="string">'ADC'</span>,<span class="string">'6300'</span>);</div><div class="line"><span class="keyword">var</span> h2 = <span class="keyword">new</span> BuyHero(<span class="string">'Amumu'</span>,<span class="string">'Jungle'</span>,<span class="string">'3100'</span>);</div><div class="line"><span class="comment">//返回都是object 无法识别对象的类型，哪个对象的实列</span></div><div class="line">   <span class="built_in">console</span>.log(<span class="keyword">typeof</span> h1);  <span class="comment">// object</span></div><div class="line">   <span class="built_in">console</span>.log(<span class="keyword">typeof</span> h2);  <span class="comment">// object</span></div><div class="line">   <span class="built_in">console</span>.log(h1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="复杂工厂模式"><a href="#复杂工厂模式" class="headerlink" title="复杂工厂模式"></a>复杂工厂模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义英雄池的构造函数</span></div><div class="line"><span class="keyword">var</span> League = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.method = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">League.prototype = &#123;</div><div class="line">	<span class="attr">constructor</span>: League,</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 买英雄这个方法</div><div class="line">	 * @param &#123;name&#125; 英雄名字</div><div class="line">	 */</div><div class="line">	buyHero: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> hero = <span class="keyword">this</span>.createHero(name);</div><div class="line">		<span class="comment">// 执行Q、W...技能，哦，业务逻辑</span></div><div class="line">		hero.Q();</div><div class="line">		hero.W();</div><div class="line">		<span class="keyword">return</span> hero;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">createHero</span>: <span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"父类是抽象类不能直接调用，需要子类重写该方法"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 实现原型继承</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">Sub,Sup</span>) </span>&#123;<span class="comment">//Sub表示子类，Sup表示超类</span></div><div class="line">	<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;<span class="comment">// 首先定义一个空函数</span></div><div class="line">	F.prototype = Sup.prototype;<span class="comment">// 设置空函数的原型为超类的原型</span></div><div class="line">	Sub.prototype = <span class="keyword">new</span> F();<span class="comment">// 实例化空函数，并把超类原型引用传递给子类</span></div><div class="line">	Sub.prototype.constructor = Sub;<span class="comment">// 重置子类原型的构造器为子类自身</span></div><div class="line">	Sub.sup = Sup.prototype;<span class="comment">// 在子类中保存超类的原型,避免子类与超类耦合</span></div><div class="line">	<span class="keyword">if</span>(Sup.prototype.constructor === <span class="built_in">Object</span>.prototype.constructor) &#123;</div><div class="line">		Sup.prototype.constructor = Sup;<span class="comment">// 检测超类原型的构造器是否为原型自身</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> HeroChild = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="comment">// 继承构造函数父类中的属性和方法</span></div><div class="line">	League.call(<span class="keyword">this</span>,name);</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 子类继承父类原型方法</span></div><div class="line">extend(HeroChild,League);</div><div class="line"><span class="comment">// BicycleChild 子类重写父类的方法</span></div><div class="line">HeroChild.prototype.createHero = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> Q = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"执行Q业务操作"</span>);</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">var</span> W = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"执行W业务操作"</span>);</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">Q</span>: Q,</div><div class="line">		<span class="attr">W</span>: W</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> Teemo = <span class="keyword">new</span> HeroChild(<span class="string">"提莫"</span>);</div><div class="line">   <span class="built_in">console</span>.log(Teemo);</div><div class="line">   <span class="built_in">console</span>.log(Teemo.name);<span class="comment">//提莫</span></div><div class="line">   Teemo.buyHero();</div></pre></td></tr></table></figure>
<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><blockquote>
<p>父类是一个抽象类，不能被实列化,将其成员对象的实列化推迟到子类中，子类可以重写父类接口方法以便创建的时候指定自己的对象类型。<br>子类之间是相互独立的。</p>
</blockquote>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>解决多个类似对象声明的问题;解决实列化对象产生重复的问题。在父类中编写一些相同的方法代码,在子类中重写该父类的方法，去实现具体的业务逻辑。</p>
<h3 id="1"><a href="#1" class="headerlink" title="1/"></a>1/</h3><p>弱化对象间的耦合，防止代码的重复。在一个方法中进行类的实例化，可以消除重复性的代码。</p>
<h3 id="2"><a href="#2" class="headerlink" title="2/"></a>2/</h3><p>重复性的代码可以放在父类去编写，子类继承于父类的所有成员属性和方法，子类只专注于实现自己的业务逻辑。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>无法获取对象类型</p>
<h1 id="单体模式"><a href="#单体模式" class="headerlink" title="单体模式"></a>单体模式</h1><h2 id="封装单体模式"><a href="#封装单体模式" class="headerlink" title="封装单体模式"></a>封装单体模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 写法一</span></div><div class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.instance = <span class="literal">null</span>;</div><div class="line">&#125;;</div><div class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 获取实例对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(!<span class="keyword">this</span>.instance) &#123;</div><div class="line">		<span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.instance;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 写法二</span></div><div class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">       <span class="keyword">this</span>.name = name;</div><div class="line">   &#125;;</div><div class="line">   Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 获取实例对象</span></div><div class="line">   <span class="keyword">var</span> getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> instance = <span class="literal">null</span>;</div><div class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span>(!instance) &#123;</div><div class="line">               instance = <span class="keyword">new</span> Singleton(name);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> instance;</div><div class="line">       &#125;</div><div class="line">   &#125;)();</div><div class="line"><span class="comment">// 测试单体模式的实例</span></div><div class="line"><span class="keyword">var</span> a = getInstance(<span class="string">"aa"</span>);</div><div class="line"><span class="keyword">var</span> b = getInstance(<span class="string">"bb"</span>);</div><div class="line"><span class="built_in">console</span>.log(a===b);<span class="comment">// true,b的实例就是a的实例</span></div></pre></td></tr></table></figure>
<h2 id="使用代理实现单体模式"><a href="#使用代理实现单体模式" class="headerlink" title="使用代理实现单体模式"></a>使用代理实现单体模式</h2><p>具体的单体模式中的实例化类的事情交给代理函数去处理，这样做的好处是具体的业务逻辑分开了，代理只管代理的业务逻辑，在这里代理的作用是实例化对象，并且只实例化一次; 创建div代码只管创建div，其他的不管；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个div</span></div><div class="line"><span class="comment">//第一种</span></div><div class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.html = html;</div><div class="line">	<span class="keyword">this</span>.init();</div><div class="line">&#125;;</div><div class="line">CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">	div.innerHTML = <span class="keyword">this</span>.html;</div><div class="line">	<span class="built_in">document</span>.body.appendChild(div);</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 代理实现单体模式</span></div><div class="line"><span class="keyword">var</span> ProxyMode = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> instance;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(!instance) &#123;</div><div class="line">			instance = <span class="keyword">new</span> CreateDiv(<span class="string">"rawraw hello"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line">&#125;)();</div><div class="line"><span class="comment">//第二种</span></div><div class="line">   <span class="comment">// 代理实现单体模式</span></div><div class="line">   <span class="keyword">var</span> ProxyMode = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span> instance;</div><div class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span>(!instance) &#123;</div><div class="line">               instance = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">               instance.innerHTML = <span class="string">"rawraw hello"</span>;</div><div class="line">               <span class="built_in">document</span>.body.appendChild(instance);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> instance;</div><div class="line">       &#125;</div><div class="line">   &#125;)();</div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> ProxyMode(<span class="string">"aaa"</span>);</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> ProxyMode(<span class="string">"bbb"</span>);</div><div class="line"><span class="built_in">console</span>.log(a===b);<span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建div</span></div><div class="line"><span class="keyword">var</span> createWindow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">	div.innerHTML = <span class="string">"我是弹窗内容"</span>;</div><div class="line">	div.style.display = <span class="string">'none'</span>;</div><div class="line">	<span class="built_in">document</span>.body.appendChild(div);</div><div class="line">	<span class="keyword">return</span> div;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 创建iframe</span></div><div class="line"><span class="keyword">var</span> createIframe = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</div><div class="line">	<span class="built_in">document</span>.body.appendChild(iframe);</div><div class="line">	<span class="keyword">return</span> iframe;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 获取实例的封装代码</span></div><div class="line"><span class="keyword">var</span> getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> result;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> result || (result = fn.call(<span class="keyword">this</span>,<span class="built_in">arguments</span>));</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 测试创建div</span></div><div class="line"><span class="keyword">var</span> createSingleDiv = getInstance(createWindow);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> win = createSingleDiv();</div><div class="line">	win.style.display = <span class="string">"block"</span>;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 测试创建iframe</span></div><div class="line"><span class="keyword">var</span> createSingleIframe = getInstance(createIframe);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> win = createSingleIframe();</div><div class="line">	win.innerHTML = <span class="string">"rawraw hello"</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h2><blockquote>
<p>单体模式是以对象字面量的方式来创建单体模式一个用来划分命名空间并将一批属性和方法组织在一起的对象，如果它可以被实例化，那么它只能被实例化一次。<br>以对象字面量的方式来创建单体模式。</p>
<blockquote>
<p>适用场景：弹窗</p>
</blockquote>
</blockquote>
<h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><h1 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> singleMode = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> privateNum = <span class="number">112</span>;<span class="comment">// 创建私有变量</span></div><div class="line">    <span class="comment">// 创建私有函数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateFunc</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// 实现自己的业务逻辑代码</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 返回一个对象包含公有方法和属性</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">publicMethod1</span>: publicMethod1,</div><div class="line">        <span class="attr">publicMethod2</span>: publicMethod1</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>模块模式使用了一个返回对象的匿名函数。在这个匿名函数内部，先定义了私有变量和函数，供内部函数使用，然后将一个对象字面量作为函数的值返回，返回的对象字面量中只包含可以公开的属性和方法。这样的话，可以提供外部使用该方法；由于该返回对象中的公有方法是在匿名函数内部定义的，因此它可以访问内部的私有变量和函数。</p>
<h2 id="增强的模块模式"><a href="#增强的模块模式" class="headerlink" title="增强的模块模式"></a>增强的模块模式</h2><p>适合那些单列必须是某种类型的实例，同时还必须添加某些属性或方法对其加以增强的情况。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = <span class="string">"rawraw"</span>;</div><div class="line">&#125;</div><div class="line">CustomType.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> application = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> privateA = <span class="string">"aa"</span>;<span class="comment">// 定义私有</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;&#125;<span class="comment">// 定义私有函数</span></div><div class="line">	<span class="keyword">var</span> object = <span class="keyword">new</span> CustomType();<span class="comment">// 实例化一个对象后，返回该实例，然后为该实例增加一些公有属性和方法</span></div><div class="line">	object.A = <span class="string">"cc"</span>;<span class="comment">// 添加公有属性</span></div><div class="line">	<span class="comment">// 添加公有方法</span></div><div class="line">	object.B = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> privateA;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> object;<span class="comment">// 返回该对象</span></div><div class="line">&#125;)();</div><div class="line"><span class="built_in">console</span>.log(application);</div><div class="line"><span class="built_in">console</span>.log(application.A);<span class="comment">// cc</span></div><div class="line"><span class="built_in">console</span>.log(application.B()); <span class="comment">// aa</span></div><div class="line"><span class="built_in">console</span>.log(application.name); <span class="comment">// rawraw</span></div><div class="line"><span class="built_in">console</span>.log(application.getName());<span class="comment">// rawraw</span></div></pre></td></tr></table></figure></p>
<h2 id="理解-2"><a href="#理解-2" class="headerlink" title="理解"></a>理解</h2><blockquote>
<p>模块模式的思路是为单体模式添加私有变量和私有方法能够减少全局变量的使用；</p>
<blockquote>
<p>适用场景：必须创建一个对象并以某些数据进行初始化，同时还要公开一些能够访问这些私有数据的方法</p>
</blockquote>
</blockquote>
<h2 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h2><h2 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h2><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">## 理解</div><div class="line">&gt;</div><div class="line">&gt;&gt; 适用场景：图片预加载</div><div class="line"></div><div class="line">## 案例</div><div class="line">```js</div><div class="line">// 不使用代理的预加载图片函数如下</div><div class="line">var myImage = (function()&#123;</div><div class="line">    var imgNode = document.createElement(&quot;img&quot;);</div><div class="line">    document.body.appendChild(imgNode);</div><div class="line">    var img = new Image();</div><div class="line">    img.onload = function()&#123;</div><div class="line">        imgNode.src = this.src;</div><div class="line">    &#125;;</div><div class="line">    return &#123;</div><div class="line">        setSrc: function(src) &#123;</div><div class="line">            imgNode.src = &quot;http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif&quot;;</div><div class="line">            img.src = src;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line">// 调用方式</div><div class="line">myImage.setSrc(&quot;https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png&quot;);</div><div class="line">var myImage = (function()&#123;</div><div class="line">    var imgNode = document.createElement(&quot;img&quot;);</div><div class="line">    document.body.appendChild(imgNode);</div><div class="line">    return &#123;</div><div class="line">        setSrc: function(src) &#123;</div><div class="line">            imgNode.src = src;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line">// 代理模式</div><div class="line">var ProxyImage = (function()&#123;</div><div class="line">    var img = new Image();</div><div class="line">    img.onload = function()&#123;</div><div class="line">        myImage.setSrc(this.src);</div><div class="line">    &#125;;</div><div class="line">    return &#123;</div><div class="line">        setSrc: function(src) &#123;</div><div class="line">                         myImage.setSrc(&quot;http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif&quot;);</div><div class="line">        img.src = src;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line">// 调用方式</div><div class="line">ProxyImage.setSrc(&quot;https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png&quot;);</div></pre></td></tr></table></figure>
<h2 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h2><p>1.代理对象可以代替本体被实例化，并使其可以被远程访问；<br>2.它还可以把本体实例化推迟到真正需要的时候；对于实例化比较费时的本体对象，或者因为尺寸比较大以至于不用时不适于保存在内存中的本体，我们可以推迟实例化该对象；</p>
<h2 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h2><h1 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">## 理解</div><div class="line">## 优点</div><div class="line">## 缺点</div><div class="line"># 命令模式</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">## 理解</div><div class="line">## 优点</div><div class="line">## 缺点</div><div class="line"># 模板方法模式</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">## 理解</div><div class="line">## 优点</div><div class="line">## 缺点</div><div class="line"># 策略模式</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">## 理解</div><div class="line">## 优点</div><div class="line">## 缺点</div><div class="line"># 发布-订阅模式(观察者模式)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">## 理解</div><div class="line">## 优点</div><div class="line">## 缺点</div><div class="line"># 中介者模式</div></pre></td></tr></table></figure>
<p>```</p>
<h2 id="理解-3"><a href="#理解-3" class="headerlink" title="理解"></a>理解</h2><h2 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h2><h2 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h2><p><a href="http://www.cnblogs.com/tugenhua0707/p/5198407.html" target="_blank" rel="external">http://www.cnblogs.com/tugenhua0707/p/5198407.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哎，最不想整理的就是这一块了&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0040.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://rawraw.info/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="JavaScript" scheme="http://rawraw.info/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Front-end总结</title>
    <link href="http://rawraw.info/2017-05-25-front-end.html"/>
    <id>http://rawraw.info/2017-05-25-front-end.html</id>
    <published>2017-05-25T08:31:48.000Z</published>
    <updated>2017-05-25T08:38:25.048Z</updated>
    
    <content type="html"><![CDATA[<p>前端学习流程整理、我的小计划。然后可能就是大神了吧，哈哈哈哈哈哈哈哈哈哈<del>~</del></p>
<p><div align="center"><br><img src="/images/bg/0041.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<p>要不要画个图 我先纠结几天吧、</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端学习流程整理、我的小计划。然后可能就是大神了吧，哈哈哈哈哈哈哈哈哈哈&lt;del&gt;~&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0041.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="小结" scheme="http://rawraw.info/categories/%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="summary" scheme="http://rawraw.info/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>navicat for mysql安装问题</title>
    <link href="http://rawraw.info/2017-05-16-navicat.html"/>
    <id>http://rawraw.info/2017-05-16-navicat.html</id>
    <published>2017-05-16T06:57:22.000Z</published>
    <updated>2017-05-16T07:23:00.427Z</updated>
    
    <content type="html"><![CDATA[<p>navicat for mysql安装问题小集合</p>
<p><div align="center"><br><img src="/images/bg/0024.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="1045"><a href="#1045" class="headerlink" title="1045"></a>1045</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C:\xampp\MySQL\bin mysql -u root mysql  </div><div class="line">mysql&gt; UPDATE user SET Password=PASSWORD(&apos;newpassword&apos;) where USER=&apos;root&apos;;</div><div class="line">mysql&gt; FLUSH PRIVILEGES;</div><div class="line">mysql&gt; quit</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;navicat for mysql安装问题小集合&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0024.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://rawraw.info/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>xampp配置虚拟主机</title>
    <link href="http://rawraw.info/2017-05-16-xampp.html"/>
    <id>http://rawraw.info/2017-05-16-xampp.html</id>
    <published>2017-05-16T06:56:42.000Z</published>
    <updated>2017-05-16T07:21:50.730Z</updated>
    
    <content type="html"><![CDATA[<p>xampp配置虚拟主机</p>
<p><div align="center"><br><img src="/images/bg/0019.jpeg" alt="“封面”"><br></div><br><a id="more"></a><br>首先，xampp要可以基本运行起来</p>
<h1 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h1><p><div align="center"><br><img src="/images/code/20170516001.png" alt="“路径”"><br></div><br>以管理员身份运行hosts,新增<code>127.0.0.1 test.com</code></p>
<h1 id="xampp配置"><a href="#xampp配置" class="headerlink" title="xampp配置"></a>xampp配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line">    ServerAdmin webmaster@dummy-host2.example.com</div><div class="line">    DocumentRoot &quot;E:/test&quot;  ## 文件根目录</div><div class="line">    ServerName  test.com    ## 虚拟域名</div><div class="line">    &lt;Directory E:/test&gt;     ## 文件根目录</div><div class="line">        Options -Indexes</div><div class="line">        AllowOverride ALL</div><div class="line">        DirectoryIndex index.php index.html</div><div class="line">        Require all granted</div><div class="line">    &lt;/Directory&gt;</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;xampp配置虚拟主机&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0019.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="xampp" scheme="http://rawraw.info/tags/xampp/"/>
    
  </entry>
  
  <entry>
    <title>http协议</title>
    <link href="http://rawraw.info/2017-05-10-http.html"/>
    <id>http://rawraw.info/2017-05-10-http.html</id>
    <published>2017-05-10T01:37:26.000Z</published>
    <updated>2017-05-17T09:21:54.282Z</updated>
    
    <content type="html"><![CDATA[<p>一个页面的呈现，经历了怎样的对白、</p>
<p><div align="center"><br><img src="/images/bg/0026.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="在浏览器输入url地址"><a href="#在浏览器输入url地址" class="headerlink" title="在浏览器输入url地址"></a>在浏览器输入url地址</h1><h1 id="浏览器查找域名的-IP-地址"><a href="#浏览器查找域名的-IP-地址" class="headerlink" title="浏览器查找域名的 IP 地址　"></a>浏览器查找域名的 IP 地址　</h1><p><a href="http://mp.weixin.qq.com/s/Z-vKtayFWPZ-E-mXAgVNsQ" target="_blank" rel="external">http://mp.weixin.qq.com/s/Z-vKtayFWPZ-E-mXAgVNsQ</a><br><a href="http://mp.weixin.qq.com/s/monpEQJWf1MpBYManDY12A" target="_blank" rel="external">http://mp.weixin.qq.com/s/monpEQJWf1MpBYManDY12A</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个页面的呈现，经历了怎样的对白、&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0026.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://rawraw.info/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="http" scheme="http://rawraw.info/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式整理</title>
    <link href="http://rawraw.info/2017-05-09-regexp.html"/>
    <id>http://rawraw.info/2017-05-09-regexp.html</id>
    <published>2017-05-09T03:22:42.000Z</published>
    <updated>2017-05-09T03:31:45.953Z</updated>
    
    <content type="html"><![CDATA[<p>特别简单的就不记下来了，这么简单都还要来翻，还撸什么码/</p>
<p><div align="center"><br><img src="/images/bg/0028.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="汉字-u4e00-u9fa5-0"><a href="#汉字-u4e00-u9fa5-0" class="headerlink" title="汉字: ^[\u4e00-\u9fa5]{0,}$"></a>汉字: <code>^[\u4e00-\u9fa5]{0,}$</code></h1><h1 id="email-w-w-w-w-w-w"><a href="#email-w-w-w-w-w-w" class="headerlink" title="email: ^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$"></a>email: <code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;特别简单的就不记下来了，这么简单都还要来翻，还撸什么码/&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0028.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="积累" scheme="http://rawraw.info/categories/%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="summary" scheme="http://rawraw.info/tags/summary/"/>
    
      <category term="正则" scheme="http://rawraw.info/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>优化总结</title>
    <link href="http://rawraw.info/2017-05-04-optimize.html"/>
    <id>http://rawraw.info/2017-05-04-optimize.html</id>
    <published>2017-05-04T08:53:50.000Z</published>
    <updated>2017-05-09T02:22:50.438Z</updated>
    
    <content type="html"><![CDATA[<p>better better ~~ 强迫症的宝宝-_—</p>
<p><div align="center"><br><img src="/images/bg/0023.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="清晰度"><a href="#清晰度" class="headerlink" title="清晰度"></a>清晰度</h2><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h2 id="3D启用硬件加速"><a href="#3D启用硬件加速" class="headerlink" title="3D启用硬件加速"></a>3D启用硬件加速</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#test &#123;</div><div class="line">  -webkit-transform:translate3d(0, 0, 0)</div><div class="line">  transform: translate3d(0, 0, 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;better better ~~ 强迫症的宝宝-_—&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0023.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="积累" scheme="http://rawraw.info/categories/%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="css" scheme="http://rawraw.info/tags/css/"/>
    
      <category term="js" scheme="http://rawraw.info/tags/js/"/>
    
      <category term="优化" scheme="http://rawraw.info/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>各种爹一样的兼容处理</title>
    <link href="http://rawraw.info/2017-05-03-compatible.html"/>
    <id>http://rawraw.info/2017-05-03-compatible.html</id>
    <published>2017-05-03T08:14:40.000Z</published>
    <updated>2017-05-03T08:21:59.198Z</updated>
    
    <content type="html"><![CDATA[<p>好奇怪的ie678,好奇怪的安卓机，好奇怪的ios爸爸。。。</p>
<p><div align="center"><br><img src="/images/bg/0005.jpg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="web端"><a href="#web端" class="headerlink" title="web端"></a>web端</h1><h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><p>在ie6-7中，用margin-bottom代替padding</p>
<h1 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好奇怪的ie678,好奇怪的安卓机，好奇怪的ios爸爸。。。&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0005.jpg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="积累" scheme="http://rawraw.info/categories/%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="兼容" scheme="http://rawraw.info/tags/%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>好用的小东西整理</title>
    <link href="http://rawraw.info/2017-05-03-css3.html"/>
    <id>http://rawraw.info/2017-05-03-css3.html</id>
    <published>2017-05-03T07:40:56.000Z</published>
    <updated>2017-05-17T09:19:07.875Z</updated>
    
    <content type="html"><![CDATA[<p>常用的css3巴拉巴拉的，js小技巧-_-</p>
<p><div align="center"><br><img src="/images/bg/0008.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h1><hr>
<h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><h3 id="将文本分成多列"><a href="#将文本分成多列" class="headerlink" title="将文本分成多列"></a>将文本分成多列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#test&#123;</div><div class="line">   -moz-column-count:3; </div><div class="line">   -webkit-column-count:3; </div><div class="line">   column-count:3;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建模糊文本"><a href="#创建模糊文本" class="headerlink" title="创建模糊文本"></a>创建模糊文本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#test &#123;</div><div class="line">   color: transparent;</div><div class="line">   text-shadow: 0 0 5px rgba(0,0,0,0.5);</div><div class="line">&#125;   </div><div class="line">```   </div><div class="line">### pre标签内文本自动换行</div></pre></td></tr></table></figure>
<pre><code>pre{
    overflow: auto;
    background-color: #f1f1f1;
    overflow-x: auto; /* Use horizontal scroller if needed; for Firefox 2, not
    white-space: pre-wrap; /* css-3 */
    white-space: -moz-pre-wrap !important; /* Mozilla, since 1999 */
    word-wrap: break-word; /* Internet Explorer 5.5+ */
    margin: 0;
    padding:5px 5px 3px 5px;
    white-space : normal; /* crucial for IE 6, maybe 7? */
}
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">### 表格自动宽度</div></pre></td></tr></table></figure>
<p>td {<br>    white-space: nowrap;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">### 让滚动条顺溜地滑</div><div class="line">定位后的滑动会出现卡顿</div></pre></td></tr></table></figure></p>
<p>body {<br>  -webkit-overflow-scrolling: touch;<br>  overflow-scrolling: touch;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">### 长按闪退</div></pre></td></tr></table></figure></p>
<p>#test{<br>  -webkit-touch-callout: none;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">### select 设置右对齐</div></pre></td></tr></table></figure></p>
<p>select option {<br>    direction: rtl;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">### touch时有半透明灰色遮罩（ios和android）</div></pre></td></tr></table></figure></p>
<p>#test{<br>  -webkit-tap-highlight-color:rgba(255,255,255,0)<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">### 输入框默认内阴影、以及默认样式(ios)</div></pre></td></tr></table></figure></p>
<p>#test{<br>  -webkit-appearance: none;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">### 部分机型存在type为search的input，自带close按钮样式</div><div class="line">&gt;`#Search::-webkit-search-cancel-button&#123;</div><div class="line">    display: none; </div><div class="line">  &#125;`</div><div class="line"></div><div class="line">### 默认首字母会大写(ios)</div><div class="line">&gt;`&lt;input type=&quot;text&quot; autocapitalize=&quot;off&quot; /&gt;`</div><div class="line"></div><div class="line">### 圆角失效(某些Android)</div></pre></td></tr></table></figure></p>
<p>#test{<br>  background-clip: padding-box;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">### 移动端伪类 `:active` 失效</div><div class="line">移动端应该是touch</div><div class="line">&gt;`&lt;body ontouchstart=&quot;&quot;&gt;` </div><div class="line">&gt;或者`document.addEventListener(&apos;touchstart&apos;,function()&#123;&#125;,false);`</div><div class="line"></div><div class="line">## 浏览器</div><div class="line">### 禁止复制、选中文本</div></pre></td></tr></table></figure></p>
<p>#test{<br>    -webkit-user-select: none;<br>    -moz-user-select: none;<br>    -khtml-user-select: none;<br>     user-select: none;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 消除 IE10 的叉号</div><div class="line">&gt;`input:-ms-clear&#123;display:none;&#125;`</div><div class="line"></div><div class="line">### css垂直居中</div><div class="line"> ![去这里看](center)         </div><div class="line">          </div><div class="line">## CSS3</div><div class="line">### 伪类</div><div class="line">#### 修改选中文本的颜色：</div><div class="line">```css [ 举一个栗子 ]</div><div class="line">user-select:none</div><div class="line">::selection&#123;</div><div class="line">color: white;</div><div class="line">background-color: red;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">::-moz-selection &#123;</div><div class="line">color: white;</div><div class="line">background-color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="首字母设置"><a href="#首字母设置" class="headerlink" title="首字母设置"></a>首字母设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#test:first-child::first-letter&#123;</div><div class="line">  font-size: 28px;</div><div class="line">  font-weight: bold;</div><div class="line">&#125;</div><div class="line">/*首字下沉*/</div><div class="line">p:first-letter&#123;</div><div class="line">    display:block;</div><div class="line">    margin:5px 0 0 5px;</div><div class="line">    float:left;</div><div class="line">    color:#FF3366;</div><div class="line">    font-size:60px;</div><div class="line">    font-family:Georgia;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="透明度的兼容"><a href="#透明度的兼容" class="headerlink" title="透明度的兼容"></a>透明度的兼容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#test &#123;</div><div class="line">    filter: alpha(opacity=50); /* internet explorer */</div><div class="line">    -khtml-opacity: 0.5;      /* khtml, old safari */</div><div class="line">    -moz-opacity: 0.5;       /* mozilla, netscape */</div><div class="line">    opacity: 0.5;           /* fx, safari, opera */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="webkit-mask遮罩"><a href="#webkit-mask遮罩" class="headerlink" title="webkit mask遮罩"></a>webkit mask遮罩</h3><p>要记得来写<br><a href="http://www.cnblogs.com/cosiray/archive/2012/12/06/2804770.html" target="_blank" rel="external">http://www.cnblogs.com/cosiray/archive/2012/12/06/2804770.html</a></p>
<h3 id="transform出现锯齿"><a href="#transform出现锯齿" class="headerlink" title="transform出现锯齿"></a>transform出现锯齿</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-webkit-transform: rotate(-4deg) skew(10deg) translateZ(0);</div><div class="line"> transform: rotate(-4deg) skew(10deg) translateZ(0);</div><div class="line"> outline: 1px solid rgba(255,255,255,0)</div></pre></td></tr></table></figure>
<h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><figure class="highlight css"><figcaption><span>[ 举一个栗子 ]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*上至下，默认方向*/</span></div><div class="line"><span class="selector-id">#test</span>&#123;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(#000, #fff); </div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(#000, #fff); </div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(#000, #fff);</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(#000, #fff); </div><div class="line">&#125;</div><div class="line"><span class="comment">/*左至右*/</span></div><div class="line"><span class="selector-id">#test2</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, #000 , #fff);</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(right, #000, #fff); </div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(right, #000, #fff); </div><div class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, #000 , #fff); </div><div class="line">&#125;</div><div class="line"><span class="comment">/*角度。12点方向为0deg,顺时针增加deg*/</span></div><div class="line"><span class="selector-id">#test3</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(180deg, #000, #fff); </div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(180deg, #000, #fff); </div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(180deg, #000, #fff);</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(180deg, #000, #fff);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*也可以径向渐变，多种颜色，透明度*/</span></div><div class="line"><span class="selector-id">#test4</span>&#123;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(#000 , #fff 10%, #000 20%);</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-o-radial-gradient</span>(#000, #fff 10%, #000 20%); </div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-radial-gradient</span>(#000, #fff 10%, #000 20%); </div><div class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(#000, #fff 10%, #000 20%); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h1><hr>
<h2 id="中文输入法输入英文时，有六分之一空格（ios）"><a href="#中文输入法输入英文时，有六分之一空格（ios）" class="headerlink" title="中文输入法输入英文时，有六分之一空格（ios）"></a>中文输入法输入英文时，有六分之一空格（ios）</h2><blockquote>
<p><code>this.value = this.value.replace(/\u2006/g, &#39;&#39;);</code></p>
</blockquote>
<h2 id="移动端autoplay-失效问题"><a href="#移动端autoplay-失效问题" class="headerlink" title="移动端autoplay 失效问题"></a>移动端autoplay 失效问题</h2><p>必须由用户来触发才可以播放。<br>touchstart 触发播放并暂停（音频开始加载，后面用 JS 再操作就没问题了）。</p>
<blockquote>
<p><code>document.addEventListener(&#39;touchstart&#39;, function () {
  document.getElementsByTagName(&#39;audio&#39;)[0].play();
  document.getElementsByTagName(&#39;audio&#39;)[0].pause();
});</code></p>
</blockquote>
<h2 id="批量修改样式"><a href="#批量修改样式" class="headerlink" title="批量修改样式"></a>批量修改样式</h2><figure class="highlight js"><figcaption><span>[ 举一个栗子 ]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div.style.cssText = <span class="string">'width:100px;height:100px;'</span></div></pre></td></tr></table></figure>
<h2 id="展开select的option"><a href="#展开select的option" class="headerlink" title="展开select的option"></a>展开select的option</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function showDropdown(sltElement) &#123;</div><div class="line">  var event;</div><div class="line">  event = document.createEvent(&apos;MouseEvents&apos;);</div><div class="line">  event.initMouseEvent(&apos;mousedown&apos;, true, true, window);</div><div class="line">  sltElement.dispatchEvent(event);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h1><hr>
<h2 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h2><h3 id="apple-mobile-web-app-capable"><a href="#apple-mobile-web-app-capable" class="headerlink" title="apple-mobile-web-app-capable"></a>apple-mobile-web-app-capable</h3><p>apple-mobile-web-app-capable是设置Web应用是否以全屏模式运行。</p>
<blockquote>
<p><code>&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</code></p>
</blockquote>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>有时候改了bug刷新并没有卵用，然后就好气啊。<br>手机页面通常在第一次加载后会进行缓存，然后每次刷新会使用缓存而不是去重新向服务器发送请求。</p>
<blockquote>
<p><code>&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-cache&quot; /&gt;</code><br>format-detection 启动或禁用自动识别页面中的电话号码。<br><code>&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</code></p>
</blockquote>
<h3 id="奇怪的浏览器强制屏幕"><a href="#奇怪的浏览器强制屏幕" class="headerlink" title="奇怪的浏览器强制屏幕"></a>奇怪的浏览器强制屏幕</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!-- QQ浏览器私有 --&gt;</div><div class="line">&lt;!-- 全屏模式 --&gt;</div><div class="line">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</div><div class="line">&lt;!-- 强制竖屏 --&gt;</div><div class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</div><div class="line">&lt;!-- 强制横屏 --&gt;</div><div class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;landscape&quot;&gt;</div><div class="line">&lt;!-- 应用模式 --&gt;</div><div class="line">&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</div><div class="line"> </div><div class="line">&lt;!-- UC浏览器私有 --&gt;</div><div class="line">&lt;!-- 全屏模式 --&gt;</div><div class="line">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</div><div class="line">&lt;!-- 强制竖屏 --&gt;</div><div class="line">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</div><div class="line">&lt;!-- 强制横屏 --&gt;</div><div class="line">&lt;meta name=&quot;screen-orientation&quot; content=&quot;landscape&quot;&gt;</div><div class="line">&lt;!-- 应用模式 --&gt;</div><div class="line">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</div></pre></td></tr></table></figure>
<h2 id="移动端拨打电话功能（安卓、ios都可以）"><a href="#移动端拨打电话功能（安卓、ios都可以）" class="headerlink" title="移动端拨打电话功能（安卓、ios都可以）"></a>移动端拨打电话功能（安卓、ios都可以）</h2><blockquote>
<p><code>&lt;a href=&quot;tel:10086&quot;&gt;10086&lt;/a&gt;</code></p>
</blockquote>
<h2 id="app"><a href="#app" class="headerlink" title="app"></a>app</h2><h3 id="横屏字体"><a href="#横屏字体" class="headerlink" title="横屏字体"></a>横屏字体</h3><p>text-size-adjust 为 none 可以解决 iOS 上的问题，但桌面版 Safari 的字体缩放功能会失效，因此最佳方案是将 text-size-adjust 为 100% </p>
<blockquote>
<p>-webkit-text-size-adjust: 100%;<br> -ms-text-size-adjust: 100%;<br> text-size-adjust: 100%;</p>
<h3 id="顶部状态栏背景色"><a href="#顶部状态栏背景色" class="headerlink" title="顶部状态栏背景色"></a>顶部状态栏背景色</h3><p>先指定全屏模式 <code>apple-mobile-web-app-capable</code><br><code>&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;blank&quot; /&gt;</code></p>
<p>content:default               正常显示<br>          blank                 黑色背景<br>          lank-translucent      黑色半透明，页面主体会向上占据位置</p>
</blockquote>
<h3 id="桌面图标"><a href="#桌面图标" class="headerlink" title="桌面图标"></a>桌面图标</h3><p>图片尺寸可以设定为57<em>57（px）或者Retina可以定为114</em>114（px），ipad尺寸为72*72（px)</p>
<blockquote>
<p><link rel="apple-touch-icon" href="touch-icon-iphone.png"><br> <link rel="apple-touch-icon" sizes="76x76" href="touch-icon-ipad.png"><br> <link rel="apple-touch-icon" sizes="120x120" href="touch-icon-iphone-retina.png"><br> <link rel="apple-touch-icon" sizes="152x152" href="touch-icon-ipad-retina.png"></p>
</blockquote>
<p>去光泽</p>
<blockquote>
<p><code>&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;touch-icon-iphone.png&quot; /&gt;</code> </p>
</blockquote>
<h3 id="启动画面"><a href="#启动画面" class="headerlink" title="启动画面"></a>启动画面</h3><blockquote>
<p><code>&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;start.png&quot;/&gt;</code><br>iOS下页面启动加载时显示的画面图片，避免加载时的白屏。<br>可以通过madia来指定不同的大小：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;!--iPhone--&gt;</div><div class="line"> &lt;link href=&quot;apple-touch-startup-image-320x460.png&quot; media=&quot;(device-width: 320px)&quot; rel=&quot;apple-touch-startup-image&quot; /&gt;</div><div class="line">  </div><div class="line"> &lt;!-- iPhone Retina --&gt;</div><div class="line"> &lt;link href=&quot;apple-touch-startup-image-640x920.png&quot; media=&quot;(device-width: 320px) and (-webkit-device-pixel-ratio: 2)&quot; rel=&quot;apple-touch-startup-image&quot; /&gt;</div><div class="line">  </div><div class="line"> &lt;!-- iPhone 5 --&gt;</div><div class="line"> &lt;link rel=&quot;apple-touch-startup-image&quot; media=&quot;(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)&quot; href=&quot;apple-touch-startup-image-640x1096.png&quot;&gt;</div><div class="line">  </div><div class="line"> &lt;!-- iPad portrait --&gt;</div><div class="line"> &lt;link href=&quot;apple-touch-startup-image-768x1004.png&quot; media=&quot;(device-width: 768px) and (orientation: portrait)&quot; rel=&quot;apple-touch-startup-image&quot; /&gt;</div><div class="line">  </div><div class="line"> &lt;!-- iPad landscape --&gt;</div><div class="line"> &lt;link href=&quot;apple-touch-startup-image-748x1024.png&quot; media=&quot;(device-width: 768px) and (orientation: landscape)&quot; rel=&quot;apple-touch-startup-image&quot; /&gt;</div><div class="line">  </div><div class="line"> &lt;!-- iPad Retina portrait --&gt;</div><div class="line"> &lt;link href=&quot;apple-touch-startup-image-1536x2008.png&quot; media=&quot;(device-width: 1536px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2)&quot; rel=&quot;apple-touch-startup-image&quot; /&gt;</div><div class="line">  </div><div class="line"> &lt;!-- iPad Retina landscape --&gt;</div><div class="line"> &lt;link href=&quot;apple-touch-startup-image-1496x2048.png&quot;media=&quot;(device-width: 1536px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2)&quot;rel=&quot;apple-touch-startup-image&quot; /&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的css3巴拉巴拉的，js小技巧-_-&lt;/p&gt;
&lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0008.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="知识点" scheme="http://rawraw.info/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="css" scheme="http://rawraw.info/tags/css/"/>
    
      <category term="js" scheme="http://rawraw.info/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>\\这个插件还可以//之select2</title>
    <link href="http://rawraw.info/2017-04-19-plu-select2.html"/>
    <id>http://rawraw.info/2017-04-19-plu-select2.html</id>
    <published>2017-04-19T03:19:41.000Z</published>
    <updated>2017-05-03T07:33:31.899Z</updated>
    
    <content type="html"><![CDATA[<p><div align="center"><br><img src="/images/bg/0027.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<p><em>placeholder: 一定要加空的<option></option></em></p>
<figure class="highlight js"><figcaption><span>[ 举一个栗子 ]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#test'</span>).select2(&#123;</div><div class="line">    <span class="attr">data</span>:[</div><div class="line">            &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">text</span>:<span class="string">"teemo"</span>&#125;,</div><div class="line">            &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">text</span>:<span class="string">"anni"</span>&#125;,</div><div class="line">            <span class="comment">//...</span></div><div class="line">    ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0027.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="插件" scheme="http://rawraw.info/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="plugin" scheme="http://rawraw.info/tags/plugin/"/>
    
      <category term="select2" scheme="http://rawraw.info/tags/select2/"/>
    
  </entry>
  
  <entry>
    <title>面试大宝典</title>
    <link href="http://rawraw.info/2017-04-12-interview.html"/>
    <id>http://rawraw.info/2017-04-12-interview.html</id>
    <published>2017-04-12T03:07:57.000Z</published>
    <updated>2017-06-12T09:02:01.474Z</updated>
    
    <content type="html"><![CDATA[<p><div align="center"><br><img src="/images/bg/0022.jpeg" alt="“封面”"><br></div><br><a id="more"></a></p>
<h1 id="为什么要学习前端"><a href="#为什么要学习前端" class="headerlink" title="为什么要学习前端"></a>为什么要学习前端</h1><h1 id="对前端的认识"><a href="#对前端的认识" class="headerlink" title="对前端的认识"></a>对前端的认识</h1><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>window.top.document.compatMode ？</p>
<h3 id="自适应"><a href="#自适应" class="headerlink" title="自适应"></a>自适应</h3><p>calc/box</p>
<h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>什么情况下会发生闭包，为什么需要闭包，什么场景下需要，闭包闭了谁，怎么释放被闭包的变量内存，闭包的优点是什么，缺点是什么等等。</p>
<h3 id="事件模型及事件代理-委托"><a href="#事件模型及事件代理-委托" class="headerlink" title="事件模型及事件代理/委托"></a>事件模型及事件代理/委托</h3><h4 id="事件的三个阶段"><a href="#事件的三个阶段" class="headerlink" title="事件的三个阶段"></a>事件的三个阶段</h4><p>捕获，目标，冒泡阶段(低版本IE不支持捕获阶段)</p>
<h4 id="事件的代理-委托-的原理以及优缺点"><a href="#事件的代理-委托-的原理以及优缺点" class="headerlink" title="{事件的代理/委托}的原理以及优缺点"></a>{事件的代理/委托}的原理以及优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol>
<li>大量节省内存占用，减少事件注册，比如在table上代理所有td的click事件就非常棒</li>
<li>实现当新增子对象时无需再次对其绑定事件，对于动态内容部分尤为合适<br>事件代理的应用常用应该仅限于上述需求下，如果把所有事件都用代理就可能会出现事件误判，即本不应用触发事件的被绑上了事件</li>
</ol>
<h4 id="IE和W3C不同绑定事件解绑事件的方法有什么区别，参数分别是什么，以及事件对象e有什么区别"><a href="#IE和W3C不同绑定事件解绑事件的方法有什么区别，参数分别是什么，以及事件对象e有什么区别" class="headerlink" title="IE和W3C不同绑定事件解绑事件的方法有什么区别，参数分别是什么，以及事件对象e有什么区别"></a>IE和W3C不同绑定事件解绑事件的方法有什么区别，参数分别是什么，以及事件对象e有什么区别</h4><p>target，currentTarget，以及IE下的srcElement和this</p>
<h4 id="实现事件模型"><a href="#实现事件模型" class="headerlink" title="实现事件模型"></a>实现事件模型</h4><p>即写一个类或是一个模块，有两个函数，一个bind一个trigger，分别实现绑定事件和触发事件，核心需求就是可以对某一个事件名称绑定多个事件响应函数，然后触发这个事件名称时，依次按绑定顺序触发相应的响应函数。</p>
<p>大致实现思路就是创建一个类或是匿名函数，在bind和trigger函数外层作用域创建一个字典对象，用于存储注册的事件及响应函数列表，bind时，如果字典没有则创建一个，key是事件名称，value是数组，里面放着当前注册的响应函数，如果字段中有，那么就直接push到数组即可。trigger时调出来依次触发事件响应函数即可。</p>
<p>不过还有很多细节，比如触发响应函数时的上下文应该是什么，触发响应函数的参数列表应该是什么，如果要求把调用trigger的参数列表都传到响应函数中还要考虑到吧arguments对象转化为纯数组才行等等。</p>
<p>还有一些面试官会问到事件如何派发也就是事件广播（dispatchEvent）等等，这里不再展开。</p>
<h3 id="Function-bind函数"><a href="#Function-bind函数" class="headerlink" title="Function.bind函数"></a>Function.bind函数</h3><h4 id="作用，应用场景，举个栗子"><a href="#作用，应用场景，举个栗子" class="headerlink" title="作用，应用场景，举个栗子"></a>作用，应用场景，举个栗子</h4><p>1、Function.bind返回的也是一个函数，所以注定发生了闭包；<br>2、在返回的这个函数中去调用一个其他的函数，这其实本质上就是函数钩子(HOOK)；<br>1、保持函数的this指向；<br>2、保持函数的所有参数都传递到目标函数；<br>3、保持函数的返回值；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Function</span>.prototype.bind) &#123;</div><div class="line">  <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">oThis</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">"function"</span>) &#123;</div><div class="line">      <span class="comment">// closest thing possible to the ECMAScript 5</span></div><div class="line">      <span class="comment">// internal IsCallable function</span></div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Function.prototype.bind - what is trying to be bound is not callable"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> aArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>), </div><div class="line">        fToBind = <span class="keyword">this</span>, </div><div class="line">        fNOP = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> fToBind.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> fNOP</div><div class="line">                                 ? <span class="keyword">this</span></div><div class="line">                                 : oThis || <span class="keyword">this</span>,</div><div class="line">                               aArgs.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)));</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    fNOP.prototype = <span class="keyword">this</span>.prototype;</div><div class="line">    fBound.prototype = <span class="keyword">new</span> fNOP();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> fBound;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数声明和函数表达式的区别"><a href="#函数声明和函数表达式的区别" class="headerlink" title="函数声明和函数表达式的区别"></a>函数声明和函数表达式的区别</h4><p>函数声明会提前<br>ECMAScript规范中表示，函数声明语句可以出现在全局代码中，或者内嵌在其他函数中，但是不能出现在循环、条件判、或者try/finally以及with语句中。</p>
<h5 id="que0-1-spacify-39-rawraw-39-gt-39-r-a-w-r-a-w-39"><a href="#que0-1-spacify-39-rawraw-39-gt-39-r-a-w-r-a-w-39" class="headerlink" title="que0.1 : spacify(&#39;rawraw&#39;)  =&gt;  &#39;r a w r a w&#39;"></a>que0.1 : <code>spacify(&#39;rawraw&#39;)</code>  =&gt;  <code>&#39;r a w r a w&#39;</code></h5><p>answer :<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">spacify</span>(<span class="params">str</span>) </span>&#123;  </div><div class="line">  <span class="keyword">return</span> str.split(<span class="string">''</span>).join(<span class="string">' '</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="que0-2-spacify-39-rawraw-39-gt-39-r-a-w-r-a-w-39"><a href="#que0-2-spacify-39-rawraw-39-gt-39-r-a-w-r-a-w-39" class="headerlink" title="que0.2 : spacify(&#39;rawraw&#39;)  =&gt;  &#39;r a w r a w&#39;"></a>que0.2 : <code>spacify(&#39;rawraw&#39;)</code>  =&gt;  <code>&#39;r a w r a w&#39;</code></h5><p>answer :<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.spacify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.split(<span class="string">''</span>).join(<span class="string">' '</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="apply和call的区别"><a href="#apply和call的区别" class="headerlink" title="apply和call的区别"></a>apply和call的区别</h4><p><a href="js01">详情见这里</a></p>
<h5 id="que0-1-log-39-hello-world-39"><a href="#que0-1-log-39-hello-world-39" class="headerlink" title="que0.1 : log(&#39;hello world&#39;);"></a>que0.1 : <code>log(&#39;hello world&#39;);</code></h5><p>answer :<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>)</span>&#123;  </div><div class="line">  <span class="built_in">console</span>.log(msg);</div><div class="line">&#125;</div><div class="line"><span class="comment">//apply</span></div></pre></td></tr></table></figure></p>
<h5 id="que0-2-log-39-hello-39-39-world-39"><a href="#que0-2-log-39-hello-39-39-world-39" class="headerlink" title="que0.2 : log(&#39;hello&#39;, &#39;world&#39;);"></a>que0.2 : <code>log(&#39;hello&#39;, &#39;world&#39;);</code></h5><p>answer :<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log(<span class="string">'hello'</span>, <span class="string">'world'</span>);</div></pre></td></tr></table></figure></p>
<h5 id="que0-3-‘-app-hello-world’"><a href="#que0-3-‘-app-hello-world’" class="headerlink" title="que0.3 : ‘(app) hello world’"></a>que0.3 : ‘(app) hello world’</h5><p>arguments是一个伪数组，我们需要先将它转换成正常的数组，我们可以使用Array.prototype.slice,<br>answer :<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">  args.unshift(<span class="string">'(app)'</span>);  </div><div class="line">  <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, args);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="Context的理解"><a href="#Context的理解" class="headerlink" title="Context的理解"></a>Context的理解</h4><h5 id="que0-1-运行结果"><a href="#que0-1-运行结果" class="headerlink" title="que0.1 : 运行结果"></a>que0.1 : 运行结果</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> User = &#123;  </div><div class="line">   <span class="attr">count</span>: <span class="number">1</span>,</div><div class="line"> </div><div class="line">   <span class="attr">getCount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</div><div class="line">   &#125;</div><div class="line"> &#125;;</div><div class="line"> <span class="comment">//1</span></div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">##### que0.2 : 运行结果</div><div class="line">`<span class="string">``</span>js</div><div class="line"><span class="built_in">console</span>.log(User.getCount());</div><div class="line"><span class="keyword">var</span> func = User.getCount;  </div><div class="line"><span class="built_in">console</span>.log(func());  </div><div class="line"><span class="comment">//undefined,unc的上下文是 ｀window，因此已经失去了count属性</span></div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line">##### que0.3 : 如何确保func的上下文始终都和User关联，这样可以使输出的答案是1</div><div class="line">answer :</div><div class="line">`<span class="string">``</span>js</div><div class="line"><span class="keyword">var</span> func = User.getCount.bind(User);  </div><div class="line"><span class="built_in">console</span>.log(func());</div></pre></td></tr></table></figure>
<h5 id="que0-4-老浏览器兼容"><a href="#que0-4-老浏览器兼容" class="headerlink" title="que0.4 : 老浏览器兼容"></a>que0.4 : 老浏览器兼容</h5><p>answer :<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.bind = <span class="built_in">Function</span>.prototype.bind || <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;  </div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">           <span class="keyword">return</span> self.apply(context,   <span class="built_in">arguments</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="排序、去重巴拉巴拉"><a href="#排序、去重巴拉巴拉" class="headerlink" title="排序、去重巴拉巴拉"></a>排序、去重巴拉巴拉</h4><h3 id="js变量提升-es6"><a href="#js变量提升-es6" class="headerlink" title="js变量提升(es6)"></a>js变量提升(es6)</h3><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p><a href="http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html" target="_blank" rel="external">http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html</a><br><a href="http://www.cnblogs.com/scottckt/archive/2011/11/12/2246531.html" target="_blank" rel="external">http://www.cnblogs.com/scottckt/archive/2011/11/12/2246531.html</a><br><a href="http://www.cnblogs.com/cat3/archive/2011/06/15/2081559.html" target="_blank" rel="external">http://www.cnblogs.com/cat3/archive/2011/06/15/2081559.html</a><br>JSONP原理。这里简单讲就是HTML里面所有带src属性的标签都可以跨域，如iframe，img，script等。</p>
<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><p>尽量不要拆字符，不可预知性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function getQueryObject(url) &#123;</div><div class="line">    url = url == null ? window.location.href : url;</div><div class="line">    var search = url.substring(url.lastIndexOf(&quot;?&quot;) + 1);</div><div class="line">    var obj = &#123;&#125;;</div><div class="line">    var reg = /([^?&amp;=]+)=([^?&amp;=]*)/g;</div><div class="line">    search.replace(reg, function (rs, $1, $2) &#123;</div><div class="line">        var name = decodeURIComponent($1);</div><div class="line">        var val = decodeURIComponent($2);                </div><div class="line">        val = String(val);</div><div class="line">        obj[name] = val;</div><div class="line">        return rs;</div><div class="line">    &#125;);</div><div class="line">    return obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><p>网络性能优化，加快访问速度，浏览器并行加载数量，怎样实现原生JS异步载入，CDN加速的原理，如何将不同静态资源发布到多个域名服务器上，发布后这些静态字段的url路径改怎么批量改写，用什么工具进行项目打包，css打包后的相对路径怎么转换为绝对路径，用什么工具进行项目模块依赖管理，怎么进行cookie优化<br>文件合并<br>文件最小化/文件压缩<br>使用CDN托管<br>缓存的使用</p>
<h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><p><a href="http://www.alloyteam.com/2012/11/javascript-throttle/" target="_blank" rel="external">http://www.alloyteam.com/2012/11/javascript-throttle/</a></p>
<h1 id="前端设计模式"><a href="#前端设计模式" class="headerlink" title="前端设计模式"></a>前端设计模式</h1><p>比较多的有观察者模式，职责链模式，工厂模式。<br>比如如何去设计一个前端UI组件，应该公开出哪些方法，应该提供哪些接口，应该提供哪些事件。哪部分逻辑流程应该开放出去让用户自行编写，如何实现组件与组件之间的通信，如何实现高内聚低耦合，如何实现组件的高复用等等</p>
<p><a href="https://github.com/darcyclarke/Front-end-Developer-Interview-Questions" target="_blank" rel="external">前端面试问题合集</a></p>
<h1 id="了解这家公司"><a href="#了解这家公司" class="headerlink" title="了解这家公司"></a>了解这家公司</h1><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><h2 id="流程管理"><a href="#流程管理" class="headerlink" title="流程管理"></a>流程管理</h2><p>每天怎么知道要做什么事情？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;/images/bg/0022.jpeg&quot; alt=&quot;“封面”&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="小结" scheme="http://rawraw.info/categories/%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="summary" scheme="http://rawraw.info/tags/summary/"/>
    
      <category term="面试" scheme="http://rawraw.info/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>markdown常用语法</title>
    <link href="http://rawraw.info/2017-04-11-markdown.html"/>
    <id>http://rawraw.info/2017-04-11-markdown.html</id>
    <published>2017-04-11T02:18:51.000Z</published>
    <updated>2017-05-04T08:37:52.889Z</updated>
    
    <content type="html"><![CDATA[<p>markdown：语法比较少也简单，用来写作排版很棒哦、<br>markdownpad：编译+预览的功能。纯编译的话，一般编辑器都可以。<br><a href="http://pan.baidu.com/s/1dF25AX7" target="_blank" rel="external">markdownpad2破解绿色中文版下载</a>&emsp;提取密码：2ne1<br><a id="more"></a></p>
<h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><h5 id="1-第一种方法的标题"><a href="#1-第一种方法的标题" class="headerlink" title="1.第一种方法的标题"></a>1.第一种方法的标题</h5><font color="#0080ff">code：</font>

<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 一级标题</span></div><div class="line"><span class="section">## 二级标题</span></div><div class="line"><span class="section">### 三级标题 </span></div><div class="line"><span class="section">#### 四级标题</span></div><div class="line"><span class="section">##### 五级标题</span></div><div class="line"><span class="section">###### 六级标题</span></div></pre></td></tr></table></figure>
<font color="#0080ff">结果：</font><br><font color="red">最小到6个######</font>

<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h5 id="2-第二种方法的标题"><a href="#2-第二种方法的标题" class="headerlink" title="2. 第二种方法的标题"></a>2. 第二种方法的标题</h5><font color="#0080ff">code：</font>

<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">一级标题</span></div><div class="line">=============</div><div class="line"></div><div class="line"><span class="section">二级标题</span></div><div class="line">----</div></pre></td></tr></table></figure>
<font color="#0080ff">结果：</font>

<h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h5 id="3-第三种方法的标题"><a href="#3-第三种方法的标题" class="headerlink" title="3. 第三种方法的标题"></a>3. 第三种方法的标题</h5><font color="#0080ff">code：</font>

<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;font size=1&gt;rawraw&lt;/font&gt;</div><div class="line">&lt;font size=2&gt;rawraw&lt;/font&gt;</div><div class="line">&lt;font size=3&gt;rawraw&lt;/font&gt;</div><div class="line">&lt;font size=4&gt;rawraw&lt;/font&gt;</div><div class="line">&lt;font size=5&gt;rawraw&lt;/font&gt;</div><div class="line">&lt;font size=6&gt;rawraw&lt;/font&gt;</div><div class="line">&lt;font size=7&gt;rawraw&lt;/font&gt;</div><div class="line">&lt;font size=8&gt;rawraw&lt;/font&gt;</div></pre></td></tr></table></figure>
<font color="#0080ff">结果：</font><br><font color="red">最大到7</font><br><font size="1">rawraw</font><br><font size="2">rawraw</font><br><font size="3">rawraw</font><br><font size="4">rawraw</font><br><font size="5">rawraw</font><br><font size="6">rawraw</font><br><font size="7">rawraw</font><br><font size="8">rawraw</font>

<h1 id="二、排序"><a href="#二、排序" class="headerlink" title="二、排序"></a>二、排序</h1><font color="#0080ff">code：</font>

<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//无序 * == + == -</div><div class="line"><span class="bullet">* </span>raw</div><div class="line"><span class="bullet">* </span>rawraw</div><div class="line"><span class="bullet">* </span>raw</div><div class="line"><span class="bullet">+ </span>raw</div><div class="line"><span class="bullet">+ </span>rawraw</div><div class="line"><span class="bullet">+ </span>rawrawraw</div><div class="line"><span class="bullet">- </span>raw</div><div class="line"><span class="bullet">- </span>rawraw</div><div class="line"><span class="bullet">- </span>rawrawraw</div><div class="line">//有序，相当于自己写吧</div><div class="line"><span class="bullet">1. </span>提莫</div><div class="line"><span class="bullet">2. </span>娑娜</div><div class="line"><span class="bullet">3. </span>莫甘娜</div></pre></td></tr></table></figure>
<font color="#0080ff">结果：</font>

<ul>
<li>raw</li>
<li>rawraw</li>
<li>raw</li>
</ul>
<ul>
<li>raw</li>
<li>rawraw</li>
<li>rawrawraw</li>
</ul>
<ul>
<li>raw</li>
<li>rawraw</li>
<li>rawrawraw</li>
</ul>
<ol>
<li>提莫</li>
<li>娑娜</li>
<li>莫甘娜</li>
</ol>
<h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><font color="#0080ff">code：</font>

<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; 这是一段引用</span></div><div class="line">&gt;&gt; 这是一段引用的嵌套</div></pre></td></tr></table></figure>
<font color="#0080ff">结果：</font>

<blockquote>
<p>这是一段引用</p>
<blockquote>
<p>这是一段引用的嵌套</p>
</blockquote>
</blockquote>
<h1 id="四、图片"><a href="#四、图片" class="headerlink" title="四、图片"></a>四、图片</h1><font color="#0080ff">code：</font>

<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">“好看死了的图片”</span>](<span class="link">/images/bg/0004.jpg</span>)</div></pre></td></tr></table></figure>
<font color="#0080ff">结果：</font>

<p><img src="/images/bg/0004.jpg" alt="“好看死了的图片”"></p>
<h1 id="五、链接"><a href="#五、链接" class="headerlink" title="五、链接"></a>五、链接</h1><font color="#0080ff">code：</font>

<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="string">去吧，皮卡丘</span>](<span class="link">nothing</span>)</div><div class="line">[<span class="string">回到主页</span>](<span class="link">http://rawraw.info</span>)</div><div class="line">飞去百度吧[Baidu] [1] ,或者[Rawraw] [2] 或者 [nothing] [3].</div><div class="line">  [1]: http://www.baidu.com/    "Baidu"</div><div class="line">  [2]: http://rawraw.info  "Rawrawh"</div><div class="line">  [3]: nothing    "nothing"</div></pre></td></tr></table></figure>
<font color="#0080ff">结果：</font>

<p><a href="nothing">去吧，皮卡丘</a><br><a href="http://rawraw.info">回到主页</a><br>飞去百度吧<a href="http://www.baidu.com/" title="Baidu" target="_blank" rel="external">Baidu</a> ,或者<a href="http://rawraw.info" title="Rawraw">Rawraw</a> 或者 <a href="nothing" title="nothing">nothing</a>.</p>
<p><em>文章内部链接的话，可以利用a的锚点</em>   </p>
<h1 id="六、代码"><a href="#六、代码" class="headerlink" title="六、代码"></a>六、代码</h1><font color="#0080ff">code：</font>

<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//行内代码</div><div class="line"><span class="code">`body &#123; margin: 0; padding: 0; &#125;`</span></div><div class="line">//行内代码代码块</div><div class="line"><span class="code">```CSS [reset.css]</span></div><div class="line">body &#123; margin: 0; padding: 0; &#125;</div><div class="line">\`\`\`</div></pre></td></tr></table></figure>
<font color="#0080ff">结果：</font>

<p><code>body { margin: 0; padding: 0; }</code></p>
<figure class="highlight css"><figcaption><span>[reset.css]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</div></pre></td></tr></table></figure>
<h1 id="七、分割线"><a href="#七、分割线" class="headerlink" title="七、分割线"></a>七、分割线</h1><font color="#0080ff">code：</font>

<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">***</span></div><div class="line"><span class="section">//或者</span></div><div class="line">---</div></pre></td></tr></table></figure>
<font color="#0080ff">结果：</font>

<hr>
<hr>
<h1 id="八、斜体"><a href="#八、斜体" class="headerlink" title="八、斜体"></a>八、斜体</h1><font color="#0080ff">code：</font>

<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//_和* 一样</div><div class="line"><span class="emphasis">_我是歪的_</span></div><div class="line"><span class="emphasis">*我是歪的*</span></div></pre></td></tr></table></figure>
<font color="#0080ff">结果：</font>

<p><em>我是歪的</em><br><em>我是歪的</em></p>
<h1 id="九、表格"><a href="#九、表格" class="headerlink" title="九、表格"></a>九、表格</h1><p>好麻烦</p>
<font color="#0080ff">code：</font>

<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| 立正！        | 向左看！       | 向右看齐！|</div><div class="line">| :----------: |----------    | -----:  |</div><div class="line">| 拉克丝        | 潘森          | 伊泽瑞尔 |</div><div class="line">| 弗拉基米尔     | 波比          | 崔丝塔娜 |</div><div class="line">| 费德提克       | 雷克顿        |    库奇 |</div></pre></td></tr></table></figure>
<font color="#0080ff">结果：</font>

<table>
<thead>
<tr>
<th style="text-align:center">立正！</th>
<th>向左看！</th>
<th style="text-align:right">向右看齐！</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">拉克丝</td>
<td>潘森</td>
<td style="text-align:right">伊泽瑞尔</td>
</tr>
<tr>
<td style="text-align:center">弗拉基米尔</td>
<td>波比</td>
<td style="text-align:right">崔丝塔娜</td>
</tr>
<tr>
<td style="text-align:center">费德提克</td>
<td>雷克顿</td>
<td style="text-align:right">库奇</td>
</tr>
</tbody>
</table>
<h1 id="十、phpstorm中的markdown插件"><a href="#十、phpstorm中的markdown插件" class="headerlink" title="十、phpstorm中的markdown插件"></a>十、phpstorm中的markdown插件</h1><p>Setting –&gt; Plungins –&gt; 搜索markdown ，install</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;markdown：语法比较少也简单，用来写作排版很棒哦、&lt;br&gt;markdownpad：编译+预览的功能。纯编译的话，一般编辑器都可以。&lt;br&gt;&lt;a href=&quot;http://pan.baidu.com/s/1dF25AX7&quot;&gt;markdownpad2破解绿色中文版下载&lt;/a&gt;&amp;emsp;提取密码：2ne1&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://rawraw.info/tags/hexo/"/>
    
      <category term="markdown" scheme="http://rawraw.info/tags/markdown/"/>
    
  </entry>
  
</feed>
